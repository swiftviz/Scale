{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"reciprocal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex","preciseIdentifier":"s:13ComplexModule0A0V","text":"Complex"},{"kind":"text","text":"? { "},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If z.reciprocal is non-nil, you can safely replace division by z with"},{"type":"text","text":" "},{"type":"text","text":"multiplication by this value. It is not advantageous to do this for an"},{"type":"text","text":" "},{"type":"text","text":"isolated division, but if you are dividing many values by a single"},{"type":"text","text":" "},{"type":"text","text":"denominator, this may sometimes be a significant performance win."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A typical use case looks something like this:"}]},{"type":"codeListing","syntax":null,"code":["func divide<T: Real>(data: [Complex<T>], by divisor: Complex<T>) -> [Complex<T>] {","  \/\/ If divisor is well-scaled, multiply by reciprocal.","  if let recip = divisor.reciprocal {","    return data.map { $0 * recip }","  }","  \/\/ Fallback on using division.","  return data.map { $0 \/ divisor }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Error Bounds:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike real types, when working with complex types, multiplying by the"},{"type":"text","text":" "},{"type":"text","text":"reciprocal instead of dividing cannot change the result. If the"},{"type":"text","text":" "},{"type":"text","text":"reciprocal is non-nil, the two computations are always equivalent."}]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/complexmodule\/complex\/reciprocal-1twmy"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/reciprocal-1twmy","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The reciprocal of this value, if it can be computed without undue"},{"type":"text","text":" "},{"type":"text","text":"overflow or underflow."}],"kind":"symbol","metadata":{"conformance":{"constraints":[{"type":"codeVoice","code":"RealType"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Real"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"reciprocal","roleHeading":"Instance Property","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"reciprocal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Complex","preciseIdentifier":"s:13ComplexModule0A0V"},{"kind":"text","text":"?"}],"symbolKind":"property","externalID":"s:13ComplexModule0A0V10reciprocalACyxGSgvp","extendedModule":"ComplexModule","modules":[{"name":"ComplexModule"}]},"hierarchy":{"paths":[["doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule","doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex","doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/AlgebraicField-Implementations"]]},"references":{"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/reciprocal-1twmy":{"conformance":{"constraints":[{"type":"codeVoice","code":"RealType"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Real"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"reciprocal","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"reciprocal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Complex","preciseIdentifier":"s:13ComplexModule0A0V"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"The reciprocal of this value, if it can be computed without undue"},{"type":"text","text":" "},{"type":"text","text":"overflow or underflow."}],"identifier":"doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/reciprocal-1twmy","kind":"symbol","type":"topic","url":"\/documentation\/complexmodule\/complex\/reciprocal-1twmy"},"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule":{"role":"collection","title":"ComplexModule","abstract":[],"identifier":"doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule","kind":"symbol","type":"topic","url":"\/documentation\/complexmodule"},"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/AlgebraicField-Implementations":{"role":"collectionGroup","title":"AlgebraicField Implementations","abstract":[],"identifier":"doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/AlgebraicField-Implementations","kind":"article","type":"topic","url":"\/documentation\/complexmodule\/complex\/algebraicfield-implementations"},"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex":{"role":"symbol","title":"Complex","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Complex"}],"abstract":[{"type":"text","text":"A complex number represented by real and imaginary parts."}],"identifier":"doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Complex"}],"url":"\/documentation\/complexmodule\/complex"}}}