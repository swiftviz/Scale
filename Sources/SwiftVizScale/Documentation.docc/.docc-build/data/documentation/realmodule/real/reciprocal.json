{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"reciprocal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"? { "},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"x"},{"type":"text","text":" if finite and nonzero, and "},{"type":"codeVoice","code":"1\/x"},{"type":"text","text":" overflows or underflows,"},{"type":"text","text":" "},{"type":"text","text":"then "},{"type":"codeVoice","code":"x.reciprocal"},{"type":"text","text":" is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". Otherwise, "},{"type":"codeVoice","code":"a.reciprocal"},{"type":"text","text":" is "},{"type":"codeVoice","code":"1\/x"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"x.reciprocal"},{"type":"text","text":" is non-nil, you may be able to replace division by "},{"type":"codeVoice","code":"x"},{"type":"text","text":" "},{"type":"text","text":"with multiplication by this value. It is not advantageous to do this"},{"type":"text","text":" "},{"type":"text","text":"for an isolated division unless it is a compile-time constant visible"},{"type":"text","text":" "},{"type":"text","text":"to the compiler, but if you are dividing many values by a single"},{"type":"text","text":" "},{"type":"text","text":"denominator, this will often be a significant performance win."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A typical use case looks something like this:"}]},{"type":"codeListing","syntax":null,"code":["func divide<T: Real>(data: [T], by divisor: T) -> [T] {","  \/\/ If divisor is well-scaled, multiply by reciprocal.","  if let recip = divisor.reciprocal {","    return data.map { $0 * recip }","  }","  \/\/ Fallback on using division.","  return data.map { $0 \/ divisor }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Error Bounds:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiplying by the reciprocal instead of dividing will slightly"},{"type":"text","text":" "},{"type":"text","text":"perturb results. For example "},{"type":"codeVoice","code":"5.0 \/ 3"},{"type":"text","text":" is 1.6666666666666667, but"},{"type":"text","text":" "},{"type":"codeVoice","code":"5.0 * 3.reciprocal!"},{"type":"text","text":" is 1.6666666666666665."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The error of a normal division is bounded by half an ulp of the"},{"type":"text","text":" "},{"type":"text","text":"result; we can derive a quick error bound for multiplication by"},{"type":"text","text":" "},{"type":"text","text":"the real reciprocal (when it exists) as follows (I will use circle"},{"type":"text","text":" "},{"type":"text","text":"operators to denote real-number arithmetic, and normal operators"},{"type":"text","text":" "},{"type":"text","text":"for floating-point arithmetic):"}]},{"type":"codeListing","syntax":null,"code":["  a * b.reciprocal! = a * (1\/b)","                    = a * (1 ⊘ b)(1 + δ₁)","                    = (a ⊘ b)(1 + δ₁)(1 + δ₂)","                    = (a ⊘ b)(1 + δ₁ + δ₂ + δ₁δ₂)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"where "},{"type":"codeVoice","code":"0 < δᵢ <= ulpOfOne\/2"},{"type":"text","text":". This gives a roughly 1-ulp error,"},{"type":"text","text":" "},{"type":"text","text":"about twice the error bound we get using division. For most"},{"type":"text","text":" "},{"type":"text","text":"purposes this is an acceptable error, but if you need to match"},{"type":"text","text":" "},{"type":"text","text":"results obtained using division, you should not use this."}]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/realmodule\/real\/reciprocal"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/Real\/reciprocal","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The (approximate) reciprocal (multiplicative inverse) of this number,"},{"type":"text","text":" "},{"type":"text","text":"if it is representable."}],"kind":"symbol","metadata":{"role":"symbol","title":"reciprocal","roleHeading":"Instance Property","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"reciprocal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"?"}],"symbolKind":"property","externalID":"s:10RealModule0A0PAAE10reciprocalxSgvp","extendedModule":"RealModule","modules":[{"name":"RealModule"}]},"hierarchy":{"paths":[["doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule","doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/AlgebraicField","doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/AlgebraicField\/reciprocal-156o3"]]},"references":{"doc://com.github.swiftviz.SwiftVizScale/documentation/RealModule":{"role":"collection","title":"RealModule","abstract":[],"identifier":"doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule","kind":"symbol","type":"topic","url":"\/documentation\/realmodule"},"doc://com.github.swiftviz.SwiftVizScale/documentation/RealModule/AlgebraicField/reciprocal-156o3":{"defaultImplementations":2,"role":"symbol","title":"reciprocal","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"reciprocal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"The (approximate) reciprocal (multiplicative inverse) of this number,"},{"type":"text","text":" "},{"type":"text","text":"if it is representable."}],"identifier":"doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/AlgebraicField\/reciprocal-156o3","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/realmodule\/algebraicfield\/reciprocal-156o3"},"https://en.wikipedia.org/wiki/Field_(mathematics)":{"title":"field","titleInlineContent":[{"type":"text","text":"field"}],"type":"link","identifier":"https:\/\/en.wikipedia.org\/wiki\/Field_(mathematics)","url":"https:\/\/en.wikipedia.org\/wiki\/Field_(mathematics)"},"doc://com.github.swiftviz.SwiftVizScale/documentation/RealModule/Real/reciprocal":{"role":"symbol","title":"reciprocal","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"reciprocal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"The (approximate) reciprocal (multiplicative inverse) of this number,"},{"type":"text","text":" "},{"type":"text","text":"if it is representable."}],"identifier":"doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/Real\/reciprocal","kind":"symbol","type":"topic","url":"\/documentation\/realmodule\/real\/reciprocal"},"doc://com.github.swiftviz.SwiftVizScale/documentation/RealModule/AlgebraicField":{"role":"symbol","title":"AlgebraicField","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AlgebraicField"}],"abstract":[{"type":"text","text":"A type modeling an algebraic "},{"type":"reference","isActive":true,"identifier":"https:\/\/en.wikipedia.org\/wiki\/Field_(mathematics)"},{"type":"text","text":". Refines the "},{"type":"codeVoice","code":"SignedNumeric"},{"type":"text","text":" protocol,"},{"type":"text","text":" "},{"type":"text","text":"adding division."}],"identifier":"doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/AlgebraicField","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AlgebraicField"}],"url":"\/documentation\/realmodule\/algebraicfield"}}}