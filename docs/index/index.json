{"interfaceLanguages":{"swift":[{"children":[{"title":"Continuous Scales","type":"groupMarker"},{"children":[{"title":"Creating Linear Scales","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/linearscale\/init(_:transform:desiredticks:reversed:rangelower:rangehigher:)-72lyl","title":"init(InputType, transform: DomainDataTransform, desiredTicks: Int, reversed: Bool, rangeLower: OutputType?, rangeHigher: OutputType?)","type":"init"},{"path":"\/documentation\/swiftvizscale\/linearscale\/init(_:transform:desiredticks:reversed:rangelower:rangehigher:)-7naj5","title":"init(ClosedRange<InputType>, transform: DomainDataTransform, desiredTicks: Int, reversed: Bool, rangeLower: OutputType?, rangeHigher: OutputType?)","type":"init"},{"path":"\/documentation\/swiftvizscale\/linearscale\/init(from:to:transform:desiredticks:reversed:rangelower:rangehigher:)","title":"init(from: InputType, to: InputType, transform: DomainDataTransform, desiredTicks: Int, reversed: Bool, rangeLower: OutputType?, rangeHigher: OutputType?)","type":"init"},{"title":"Updating Scales","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/linearscale\/domain(_:)-36okr","title":"func domain([InputType]) -> LinearScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/domain(_:)-9tccc","title":"func domain(ClosedRange<InputType>) -> LinearScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/domain(_:nice:)","title":"func domain([InputType], nice: Bool) -> LinearScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/domain(lower:higher:)","title":"func domain(lower: InputType, higher: InputType) -> LinearScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/transform(_:)","title":"func transform(DomainDataTransform) -> LinearScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/range(_:)","title":"func range(ClosedRange<OutputType>) -> LinearScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/range(lower:higher:)","title":"func range(lower: OutputType, higher: OutputType) -> LinearScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/range(reversed:_:)","title":"func range(reversed: Bool, ClosedRange<OutputType>) -> LinearScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/range(reversed:lower:higher:)","title":"func range(reversed: Bool, lower: OutputType, higher: OutputType) -> LinearScale<InputType, OutputType>","type":"method"},{"title":"Inspecting Scales","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/linearscale\/domainlower","title":"let domainLower: InputType","type":"property"},{"path":"\/documentation\/swiftvizscale\/linearscale\/domainhigher","title":"let domainHigher: InputType","type":"property"},{"path":"\/documentation\/swiftvizscale\/linearscale\/domainextent","title":"let domainExtent: InputType","type":"property"},{"path":"\/documentation\/swiftvizscale\/linearscale\/transformtype","title":"var transformType: DomainDataTransform","type":"property"},{"path":"\/documentation\/swiftvizscale\/linearscale\/desiredticks","title":"let desiredTicks: Int","type":"property"},{"path":"\/documentation\/swiftvizscale\/linearscale\/reversed","title":"let reversed: Bool","type":"property"},{"path":"\/documentation\/swiftvizscale\/linearscale\/rangehigher","title":"let rangeHigher: OutputType?","type":"property"},{"path":"\/documentation\/swiftvizscale\/linearscale\/rangelower","title":"let rangeLower: OutputType?","type":"property"},{"path":"\/documentation\/swiftvizscale\/linearscale\/scaletype","title":"let scaleType: ContinuousScaleType","type":"property"},{"title":"Converting Values","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/linearscale\/scale(_:)","title":"func scale(InputType) -> OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/scale(_:from:to:)","title":"func scale(InputType, from: OutputType, to: OutputType) -> OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/scale(_:reversed:from:to:)","title":"func scale(InputType, reversed: Bool, from: OutputType, to: OutputType) -> OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/scale(_:to:)","title":"func scale(Self.InputType, to: Self.OutputType) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/scale(_:to:reversed:)","title":"func scale(Self.InputType, to: Self.OutputType, reversed: Bool) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/invert(_:)","title":"func invert(OutputType) -> InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/invert(_:from:to:)","title":"func invert(OutputType, from: OutputType, to: OutputType) -> InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/invert(_:reversed:from:to:)","title":"func invert(OutputType, reversed: Bool, from: OutputType, to: OutputType) -> InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/invert(_:to:)","title":"func invert(Self.OutputType, to: Self.OutputType) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/invert(_:to:reversed:)","title":"func invert(Self.OutputType, to: Self.OutputType, reversed: Bool) -> Self.InputType?","type":"method"},{"title":"Comparing Values","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/linearscale\/transformagainstdomain(_:)","title":"func transformAgainstDomain(Self.InputType) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/domaincontains(_:)","title":"func domainContains(Self.InputType) -> Bool","type":"method"},{"title":"Creating Ticks","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/linearscale\/ticksfromvalues(_:reversed:from:to:formatter:)","title":"func ticksFromValues([Self.InputType], reversed: Bool, from: Self.OutputType, to: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/validtickvalues(_:formatter:)","title":"func validTickValues([Self.InputType], formatter: Formatter?) -> [String]","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/linearscale\/defaulttickvalues(formatter:)-20tnn","title":"func defaultTickValues(formatter: Formatter?) -> [String]","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/defaulttickvalues(formatter:)-3vx0p","title":"func defaultTickValues(formatter: Formatter?) -> [String]","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/domaincontains(_:)","title":"func domainContains(Self.InputType) -> Bool","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/invert(_:to:)","title":"func invert(Self.OutputType, to: Self.OutputType) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/invert(_:to:reversed:)","title":"func invert(Self.OutputType, to: Self.OutputType, reversed: Bool) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/scale(_:to:)","title":"func scale(Self.InputType, to: Self.OutputType) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/scale(_:to:reversed:)","title":"func scale(Self.InputType, to: Self.OutputType, reversed: Bool) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/ticks(rangelower:rangehigher:formatter:)-5xor8","title":"func ticks(rangeLower: Self.OutputType, rangeHigher: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/ticks(rangelower:rangehigher:formatter:)-kfhr","title":"func ticks(rangeLower: Self.OutputType, rangeHigher: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/ticks(reversed:rangelower:rangehigher:formatter:)-1oig","title":"func ticks(reversed: Bool, rangeLower: Self.OutputType, rangeHigher: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/ticks(reversed:rangelower:rangehigher:formatter:)-9b7vk","title":"func ticks(reversed: Bool, rangeLower: Self.OutputType, rangeHigher: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/ticksfromvalues(_:reversed:from:to:formatter:)","title":"func ticksFromValues([Self.InputType], reversed: Bool, from: Self.OutputType, to: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/transformagainstdomain(_:)","title":"func transformAgainstDomain(Self.InputType) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/linearscale\/validtickvalues(_:formatter:)","title":"func validTickValues([Self.InputType], formatter: Formatter?) -> [String]","type":"method"}],"path":"\/documentation\/swiftvizscale\/linearscale\/continuousscaleprotocol-implementations","title":"ContinuousScaleProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/linearscale\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/swiftvizscale\/linearscale\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/swiftvizscale\/linearscale","title":"LinearScale","type":"struct"},{"children":[{"title":"Creating Logarithmic Scales","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/logscale\/init(_:transform:desiredticks:reversed:rangelower:rangehigher:)","title":"init(ClosedRange<InputType>, transform: DomainDataTransform, desiredTicks: Int, reversed: Bool, rangeLower: OutputType?, rangeHigher: OutputType?)","type":"init"},{"path":"\/documentation\/swiftvizscale\/logscale\/init(from:to:transform:desiredticks:reversed:rangelower:rangehigher:)","title":"init(from: InputType, to: InputType, transform: DomainDataTransform, desiredTicks: Int, reversed: Bool, rangeLower: OutputType?, rangeHigher: OutputType?)","type":"init"},{"title":"Updating Scales","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/logscale\/domain(_:)-1itfq","title":"func domain(ClosedRange<InputType>) -> LogScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/domain(_:)-3xqw2","title":"func domain([InputType]) -> LogScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/domain(_:nice:)","title":"func domain([InputType], nice: Bool) -> LogScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/domain(lower:higher:)","title":"func domain(lower: InputType, higher: InputType) -> LogScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/transform(_:)","title":"func transform(DomainDataTransform) -> LogScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/range(_:)","title":"func range(ClosedRange<OutputType>) -> LogScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/range(lower:higher:)","title":"func range(lower: OutputType, higher: OutputType) -> LogScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/range(reversed:_:)","title":"func range(reversed: Bool, ClosedRange<OutputType>) -> LogScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/range(reversed:lower:higher:)","title":"func range(reversed: Bool, lower: OutputType, higher: OutputType) -> LogScale<InputType, OutputType>","type":"method"},{"title":"Inspecting Scales","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/logscale\/domainlower","title":"let domainLower: InputType","type":"property"},{"path":"\/documentation\/swiftvizscale\/logscale\/domainhigher","title":"let domainHigher: InputType","type":"property"},{"path":"\/documentation\/swiftvizscale\/logscale\/domainextent","title":"let domainExtent: InputType","type":"property"},{"path":"\/documentation\/swiftvizscale\/logscale\/transformtype","title":"var transformType: DomainDataTransform","type":"property"},{"path":"\/documentation\/swiftvizscale\/logscale\/desiredticks","title":"let desiredTicks: Int","type":"property"},{"path":"\/documentation\/swiftvizscale\/logscale\/reversed","title":"let reversed: Bool","type":"property"},{"path":"\/documentation\/swiftvizscale\/logscale\/rangehigher","title":"let rangeHigher: OutputType?","type":"property"},{"path":"\/documentation\/swiftvizscale\/logscale\/rangelower","title":"let rangeLower: OutputType?","type":"property"},{"path":"\/documentation\/swiftvizscale\/logscale\/scaletype","title":"let scaleType: ContinuousScaleType","type":"property"},{"title":"Converting Values","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/logscale\/scale(_:)","title":"func scale(InputType) -> OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/scale(_:from:to:)","title":"func scale(InputType, from: OutputType, to: OutputType) -> OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/scale(_:reversed:from:to:)","title":"func scale(InputType, reversed: Bool, from: OutputType, to: OutputType) -> OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/scale(_:to:)","title":"func scale(Self.InputType, to: Self.OutputType) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/scale(_:to:reversed:)","title":"func scale(Self.InputType, to: Self.OutputType, reversed: Bool) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/invert(_:)","title":"func invert(OutputType) -> InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/invert(_:from:to:)","title":"func invert(OutputType, from: OutputType, to: OutputType) -> InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/invert(_:reversed:from:to:)","title":"func invert(OutputType, reversed: Bool, from: OutputType, to: OutputType) -> InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/invert(_:to:)","title":"func invert(Self.OutputType, to: Self.OutputType) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/invert(_:to:reversed:)","title":"func invert(Self.OutputType, to: Self.OutputType, reversed: Bool) -> Self.InputType?","type":"method"},{"title":"Comparing Values","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/logscale\/transformagainstdomain(_:)","title":"func transformAgainstDomain(Self.InputType) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/domaincontains(_:)","title":"func domainContains(Self.InputType) -> Bool","type":"method"},{"title":"Creating Ticks","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/logscale\/ticksfromvalues(_:reversed:from:to:formatter:)","title":"func ticksFromValues([Self.InputType], reversed: Bool, from: Self.OutputType, to: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/validtickvalues(_:formatter:)","title":"func validTickValues([Self.InputType], formatter: Formatter?) -> [String]","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/logscale\/defaulttickvalues(formatter:)-8y31r","title":"func defaultTickValues(formatter: Formatter?) -> [String]","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/defaulttickvalues(formatter:)-9sfak","title":"func defaultTickValues(formatter: Formatter?) -> [String]","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/domaincontains(_:)","title":"func domainContains(Self.InputType) -> Bool","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/invert(_:to:)","title":"func invert(Self.OutputType, to: Self.OutputType) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/invert(_:to:reversed:)","title":"func invert(Self.OutputType, to: Self.OutputType, reversed: Bool) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/scale(_:to:)","title":"func scale(Self.InputType, to: Self.OutputType) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/scale(_:to:reversed:)","title":"func scale(Self.InputType, to: Self.OutputType, reversed: Bool) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/ticks(rangelower:rangehigher:formatter:)-2r80c","title":"func ticks(rangeLower: Self.OutputType, rangeHigher: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/ticks(rangelower:rangehigher:formatter:)-6n437","title":"func ticks(rangeLower: Self.OutputType, rangeHigher: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/ticks(reversed:rangelower:rangehigher:formatter:)-6ela7","title":"func ticks(reversed: Bool, rangeLower: Self.OutputType, rangeHigher: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/ticks(reversed:rangelower:rangehigher:formatter:)-8c4j0","title":"func ticks(reversed: Bool, rangeLower: Self.OutputType, rangeHigher: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/ticksfromvalues(_:reversed:from:to:formatter:)","title":"func ticksFromValues([Self.InputType], reversed: Bool, from: Self.OutputType, to: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/transformagainstdomain(_:)","title":"func transformAgainstDomain(Self.InputType) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/logscale\/validtickvalues(_:formatter:)","title":"func validTickValues([Self.InputType], formatter: Formatter?) -> [String]","type":"method"}],"path":"\/documentation\/swiftvizscale\/logscale\/continuousscaleprotocol-implementations","title":"ContinuousScaleProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/logscale\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/swiftvizscale\/logscale\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/swiftvizscale\/logscale","title":"LogScale","type":"struct"},{"children":[{"title":"Creating Logrithmic Scales","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/powerscale\/init(from:to:exponent:transform:desiredticks:reversed:rangelower:rangehigher:)","title":"init(from: InputType, to: InputType, exponent: Double, transform: DomainDataTransform, desiredTicks: Int, reversed: Bool, rangeLower: OutputType?, rangeHigher: OutputType?)","type":"init"},{"path":"\/documentation\/swiftvizscale\/powerscale\/init(_:exponent:transform:desiredticks:reversed:rangelower:rangehigher:)-3mhh9","title":"init(ClosedRange<InputType>, exponent: Double, transform: DomainDataTransform, desiredTicks: Int, reversed: Bool, rangeLower: OutputType?, rangeHigher: OutputType?)","type":"init"},{"path":"\/documentation\/swiftvizscale\/powerscale\/init(_:exponent:transform:desiredticks:reversed:rangelower:rangehigher:)-60z2k","title":"init(InputType, exponent: Double, transform: DomainDataTransform, desiredTicks: Int, reversed: Bool, rangeLower: OutputType?, rangeHigher: OutputType?)","type":"init"},{"title":"Updating Scales","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/powerscale\/domain(_:)-6gsv","title":"func domain([InputType]) -> PowerScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/domain(_:)-6w4dt","title":"func domain(ClosedRange<InputType>) -> PowerScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/domain(_:nice:)","title":"func domain([InputType], nice: Bool) -> PowerScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/domain(lower:higher:)","title":"func domain(lower: InputType, higher: InputType) -> PowerScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/transform(_:)","title":"func transform(DomainDataTransform) -> PowerScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/range(_:)","title":"func range(ClosedRange<OutputType>) -> PowerScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/range(lower:higher:)","title":"func range(lower: OutputType, higher: OutputType) -> PowerScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/range(reversed:_:)","title":"func range(reversed: Bool, ClosedRange<OutputType>) -> PowerScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/range(reversed:lower:higher:)","title":"func range(reversed: Bool, lower: OutputType, higher: OutputType) -> PowerScale<InputType, OutputType>","type":"method"},{"title":"Inspecting Scales","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/powerscale\/domainlower","title":"let domainLower: InputType","type":"property"},{"path":"\/documentation\/swiftvizscale\/powerscale\/domainhigher","title":"let domainHigher: InputType","type":"property"},{"path":"\/documentation\/swiftvizscale\/powerscale\/domainextent","title":"let domainExtent: InputType","type":"property"},{"path":"\/documentation\/swiftvizscale\/powerscale\/exponent","title":"let exponent: Double","type":"property"},{"path":"\/documentation\/swiftvizscale\/powerscale\/transformtype","title":"var transformType: DomainDataTransform","type":"property"},{"path":"\/documentation\/swiftvizscale\/powerscale\/desiredticks","title":"let desiredTicks: Int","type":"property"},{"path":"\/documentation\/swiftvizscale\/powerscale\/reversed","title":"let reversed: Bool","type":"property"},{"path":"\/documentation\/swiftvizscale\/powerscale\/rangehigher","title":"let rangeHigher: OutputType?","type":"property"},{"path":"\/documentation\/swiftvizscale\/powerscale\/rangelower","title":"let rangeLower: OutputType?","type":"property"},{"path":"\/documentation\/swiftvizscale\/powerscale\/scaletype","title":"var scaleType: ContinuousScaleType","type":"property"},{"title":"Converting Values","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/powerscale\/scale(_:)","title":"func scale(InputType) -> OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/scale(_:from:to:)","title":"func scale(InputType, from: OutputType, to: OutputType) -> OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/scale(_:reversed:from:to:)","title":"func scale(InputType, reversed: Bool, from: OutputType, to: OutputType) -> OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/scale(_:to:)","title":"func scale(Self.InputType, to: Self.OutputType) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/scale(_:to:reversed:)","title":"func scale(Self.InputType, to: Self.OutputType, reversed: Bool) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/invert(_:)","title":"func invert(OutputType) -> InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/invert(_:from:to:)","title":"func invert(OutputType, from: OutputType, to: OutputType) -> InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/invert(_:reversed:from:to:)","title":"func invert(OutputType, reversed: Bool, from: OutputType, to: OutputType) -> InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/invert(_:to:)","title":"func invert(Self.OutputType, to: Self.OutputType) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/invert(_:to:reversed:)","title":"func invert(Self.OutputType, to: Self.OutputType, reversed: Bool) -> Self.InputType?","type":"method"},{"title":"Comparing Values","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/powerscale\/transformagainstdomain(_:)","title":"func transformAgainstDomain(Self.InputType) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/domaincontains(_:)","title":"func domainContains(Self.InputType) -> Bool","type":"method"},{"title":"Creating Ticks","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/powerscale\/ticksfromvalues(_:reversed:from:to:formatter:)","title":"func ticksFromValues([Self.InputType], reversed: Bool, from: Self.OutputType, to: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/validtickvalues(_:formatter:)","title":"func validTickValues([Self.InputType], formatter: Formatter?) -> [String]","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/powerscale\/defaulttickvalues(formatter:)-2pchk","title":"func defaultTickValues(formatter: Formatter?) -> [String]","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/defaulttickvalues(formatter:)-63pji","title":"func defaultTickValues(formatter: Formatter?) -> [String]","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/domaincontains(_:)","title":"func domainContains(Self.InputType) -> Bool","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/invert(_:to:)","title":"func invert(Self.OutputType, to: Self.OutputType) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/invert(_:to:reversed:)","title":"func invert(Self.OutputType, to: Self.OutputType, reversed: Bool) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/scale(_:to:)","title":"func scale(Self.InputType, to: Self.OutputType) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/scale(_:to:reversed:)","title":"func scale(Self.InputType, to: Self.OutputType, reversed: Bool) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/ticks(rangelower:rangehigher:formatter:)-8vqf8","title":"func ticks(rangeLower: Self.OutputType, rangeHigher: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/ticks(rangelower:rangehigher:formatter:)-9hch1","title":"func ticks(rangeLower: Self.OutputType, rangeHigher: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/ticks(reversed:rangelower:rangehigher:formatter:)-2nx3q","title":"func ticks(reversed: Bool, rangeLower: Self.OutputType, rangeHigher: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/ticks(reversed:rangelower:rangehigher:formatter:)-6m55x","title":"func ticks(reversed: Bool, rangeLower: Self.OutputType, rangeHigher: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/ticksfromvalues(_:reversed:from:to:formatter:)","title":"func ticksFromValues([Self.InputType], reversed: Bool, from: Self.OutputType, to: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/transformagainstdomain(_:)","title":"func transformAgainstDomain(Self.InputType) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/powerscale\/validtickvalues(_:formatter:)","title":"func validTickValues([Self.InputType], formatter: Formatter?) -> [String]","type":"method"}],"path":"\/documentation\/swiftvizscale\/powerscale\/continuousscaleprotocol-implementations","title":"ContinuousScaleProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/powerscale\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/swiftvizscale\/powerscale\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/swiftvizscale\/powerscale","title":"PowerScale","type":"struct"},{"children":[{"title":"Creating Linear Scales","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/radialscale\/init(from:to:transform:desiredticks:reversed:rangelower:rangehigher:)","title":"init(from: InputType, to: InputType, transform: DomainDataTransform, desiredTicks: Int, reversed: Bool, rangeLower: OutputType?, rangeHigher: OutputType?)","type":"init"},{"path":"\/documentation\/swiftvizscale\/radialscale\/init(_:transform:desiredticks:reversed:rangelower:rangehigher:)-1rhvz","title":"init(InputType, transform: DomainDataTransform, desiredTicks: Int, reversed: Bool, rangeLower: OutputType?, rangeHigher: OutputType?)","type":"init"},{"path":"\/documentation\/swiftvizscale\/radialscale\/init(_:transform:desiredticks:reversed:rangelower:rangehigher:)-7uv45","title":"init(ClosedRange<InputType>, transform: DomainDataTransform, desiredTicks: Int, reversed: Bool, rangeLower: OutputType?, rangeHigher: OutputType?)","type":"init"},{"title":"Updating Scales","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/radialscale\/domain(_:)-84a8n","title":"func domain([InputType]) -> RadialScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/domain(_:)-8golr","title":"func domain(ClosedRange<InputType>) -> RadialScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/domain(_:nice:)","title":"func domain([InputType], nice: Bool) -> RadialScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/domain(lower:higher:)","title":"func domain(lower: InputType, higher: InputType) -> RadialScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/transform(_:)","title":"func transform(DomainDataTransform) -> RadialScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/range(_:)","title":"func range(ClosedRange<OutputType>) -> RadialScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/range(lower:higher:)","title":"func range(lower: OutputType, higher: OutputType) -> RadialScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/range(reversed:_:)","title":"func range(reversed: Bool, ClosedRange<OutputType>) -> RadialScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/range(reversed:lower:higher:)","title":"func range(reversed: Bool, lower: OutputType, higher: OutputType) -> RadialScale<InputType, OutputType>","type":"method"},{"title":"Inspecting Scales","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/radialscale\/domainlower","title":"let domainLower: InputType","type":"property"},{"path":"\/documentation\/swiftvizscale\/radialscale\/domainhigher","title":"let domainHigher: InputType","type":"property"},{"path":"\/documentation\/swiftvizscale\/radialscale\/domainextent","title":"let domainExtent: InputType","type":"property"},{"path":"\/documentation\/swiftvizscale\/radialscale\/transformtype","title":"var transformType: DomainDataTransform","type":"property"},{"path":"\/documentation\/swiftvizscale\/radialscale\/desiredticks","title":"let desiredTicks: Int","type":"property"},{"path":"\/documentation\/swiftvizscale\/radialscale\/reversed","title":"let reversed: Bool","type":"property"},{"path":"\/documentation\/swiftvizscale\/radialscale\/rangehigher","title":"let rangeHigher: OutputType?","type":"property"},{"path":"\/documentation\/swiftvizscale\/radialscale\/rangelower","title":"let rangeLower: OutputType?","type":"property"},{"path":"\/documentation\/swiftvizscale\/radialscale\/scaletype","title":"let scaleType: ContinuousScaleType","type":"property"},{"title":"Converting Values","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/radialscale\/scale(_:)","title":"func scale(InputType) -> OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/scale(_:from:to:)","title":"func scale(InputType, from: OutputType, to: OutputType) -> OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/scale(_:reversed:from:to:)","title":"func scale(InputType, reversed: Bool, from: OutputType, to: OutputType) -> OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/scale(_:to:)","title":"func scale(Self.InputType, to: Self.OutputType) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/scale(_:to:reversed:)","title":"func scale(Self.InputType, to: Self.OutputType, reversed: Bool) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/invert(_:)","title":"func invert(OutputType) -> InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/invert(_:from:to:)","title":"func invert(OutputType, from: OutputType, to: OutputType) -> InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/invert(_:reversed:from:to:)","title":"func invert(OutputType, reversed: Bool, from: OutputType, to: OutputType) -> InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/invert(_:to:)","title":"func invert(Self.OutputType, to: Self.OutputType) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/invert(_:to:reversed:)","title":"func invert(Self.OutputType, to: Self.OutputType, reversed: Bool) -> Self.InputType?","type":"method"},{"title":"Comparing Values","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/radialscale\/transformagainstdomain(_:)","title":"func transformAgainstDomain(Self.InputType) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/domaincontains(_:)","title":"func domainContains(Self.InputType) -> Bool","type":"method"},{"title":"Creating Ticks","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/radialscale\/ticksfromvalues(_:reversed:from:to:formatter:)","title":"func ticksFromValues([Self.InputType], reversed: Bool, from: Self.OutputType, to: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/validtickvalues(_:formatter:)","title":"func validTickValues([Self.InputType], formatter: Formatter?) -> [String]","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/radialscale\/defaulttickvalues(formatter:)-35so9","title":"func defaultTickValues(formatter: Formatter?) -> [String]","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/defaulttickvalues(formatter:)-4j7ih","title":"func defaultTickValues(formatter: Formatter?) -> [String]","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/domaincontains(_:)","title":"func domainContains(Self.InputType) -> Bool","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/invert(_:to:)","title":"func invert(Self.OutputType, to: Self.OutputType) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/invert(_:to:reversed:)","title":"func invert(Self.OutputType, to: Self.OutputType, reversed: Bool) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/scale(_:to:)","title":"func scale(Self.InputType, to: Self.OutputType) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/scale(_:to:reversed:)","title":"func scale(Self.InputType, to: Self.OutputType, reversed: Bool) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/ticks(rangelower:rangehigher:formatter:)-2r214","title":"func ticks(rangeLower: Self.OutputType, rangeHigher: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/ticks(rangelower:rangehigher:formatter:)-341bl","title":"func ticks(rangeLower: Self.OutputType, rangeHigher: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/ticks(reversed:rangelower:rangehigher:formatter:)-64l6s","title":"func ticks(reversed: Bool, rangeLower: Self.OutputType, rangeHigher: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/ticks(reversed:rangelower:rangehigher:formatter:)-gtxa","title":"func ticks(reversed: Bool, rangeLower: Self.OutputType, rangeHigher: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/ticksfromvalues(_:reversed:from:to:formatter:)","title":"func ticksFromValues([Self.InputType], reversed: Bool, from: Self.OutputType, to: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/transformagainstdomain(_:)","title":"func transformAgainstDomain(Self.InputType) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/radialscale\/validtickvalues(_:formatter:)","title":"func validTickValues([Self.InputType], formatter: Formatter?) -> [String]","type":"method"}],"path":"\/documentation\/swiftvizscale\/radialscale\/continuousscaleprotocol-implementations","title":"ContinuousScaleProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/radialscale\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/swiftvizscale\/radialscale\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/swiftvizscale\/radialscale","title":"RadialScale","type":"struct"},{"children":[{"title":"Inspecting Scales","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/domainlower","title":"let domainLower: InputType","type":"property"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/domainhigher","title":"let domainHigher: InputType","type":"property"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/transformtype","title":"var transformType: DomainDataTransform","type":"property"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/scaletype","title":"let scaleType: ContinuousScaleType","type":"property"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/desiredticks","title":"let desiredTicks: Int","type":"property"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/reversed","title":"let reversed: Bool","type":"property"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/rangehigher","title":"let rangeHigher: OutputType?","type":"property"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/rangelower","title":"let rangeLower: OutputType?","type":"property"},{"children":[{"title":"Domain Transform Values","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/domaindatatransform\/none","title":"case none","type":"case"},{"path":"\/documentation\/swiftvizscale\/domaindatatransform\/clamp","title":"case clamp","type":"case"},{"path":"\/documentation\/swiftvizscale\/domaindatatransform\/drop","title":"case drop","type":"case"},{"title":"Comparing Transform Settings","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/domaindatatransform\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/domaindatatransform\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/swiftvizscale\/domaindatatransform\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/swiftvizscale\/domaindatatransform","title":"DomainDataTransform","type":"enum"},{"title":"Updating Scales","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/domain(_:nice:)","title":"func domain([InputType], nice: Bool) -> ContinuousScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/domain(lower:higher:)","title":"func domain(lower: InputType, higher: InputType) -> ContinuousScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/range(_:)","title":"func range(ClosedRange<OutputType>) -> ContinuousScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/range(lower:higher:)","title":"func range(lower: OutputType, higher: OutputType) -> ContinuousScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/range(reversed:_:)","title":"func range(reversed: Bool, ClosedRange<OutputType>) -> ContinuousScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/range(reversed:lower:higher:)","title":"func range(reversed: Bool, lower: OutputType, higher: OutputType) -> ContinuousScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/transform(_:)","title":"func transform(DomainDataTransform) -> ContinuousScale<InputType, OutputType>","type":"method"},{"title":"Converting Values","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/scale(_:)","title":"func scale(InputType) -> OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/scale(_:from:to:)","title":"func scale(InputType, from: OutputType, to: OutputType) -> OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/scale(_:reversed:from:to:)","title":"func scale(InputType, reversed: Bool, from: OutputType, to: OutputType) -> OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/scale(_:to:)","title":"func scale(Self.InputType, to: Self.OutputType) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/scale(_:to:reversed:)","title":"func scale(Self.InputType, to: Self.OutputType, reversed: Bool) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/invert(_:)","title":"func invert(OutputType) -> InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/invert(_:from:to:)","title":"func invert(OutputType, from: OutputType, to: OutputType) -> InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/invert(_:reversed:from:to:)","title":"func invert(OutputType, reversed: Bool, from: OutputType, to: OutputType) -> InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/invert(_:to:)","title":"func invert(Self.OutputType, to: Self.OutputType) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/invert(_:to:reversed:)","title":"func invert(Self.OutputType, to: Self.OutputType, reversed: Bool) -> Self.InputType?","type":"method"},{"title":"Comparing Values","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/transformagainstdomain(_:)","title":"func transformAgainstDomain(Self.InputType) -> Self.InputType?","type":"method"},{"title":"Creating Ticks","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/ticksfromvalues(_:reversed:from:to:formatter:)","title":"func ticksFromValues([Self.InputType], reversed: Bool, from: Self.OutputType, to: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/validtickvalues(_:formatter:)","title":"func validTickValues([Self.InputType], formatter: Formatter?) -> [String]","type":"method"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/init(_:type:transform:desiredticks:reversed:rangelower:rangehigher:)-2rwdv","title":"init(InputType, type: ContinuousScaleType, transform: DomainDataTransform, desiredTicks: Int, reversed: Bool, rangeLower: OutputType?, rangeHigher: OutputType?)","type":"init"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/init(_:type:transform:desiredticks:reversed:rangelower:rangehigher:)-9hcw4","title":"init(ClosedRange<InputType>, type: ContinuousScaleType, transform: DomainDataTransform, desiredTicks: Int, reversed: Bool, rangeLower: OutputType?, rangeHigher: OutputType?)","type":"init"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/init(from:to:type:transform:desiredticks:reversed:rangelower:rangehigher:)","title":"init(from: InputType, to: InputType, type: ContinuousScaleType, transform: DomainDataTransform, desiredTicks: Int, reversed: Bool, rangeLower: OutputType?, rangeHigher: OutputType?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/domain(_:)-4f5d3","title":"func domain(ClosedRange<InputType>) -> ContinuousScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/domain(_:)-6auzq","title":"func domain([InputType]) -> ContinuousScale<InputType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/scaletype(_:)","title":"func scaleType(ContinuousScaleType) -> ContinuousScale<InputType, OutputType>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/defaulttickvalues(formatter:)-5lwij","title":"func defaultTickValues(formatter: Formatter?) -> [String]","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/defaulttickvalues(formatter:)-92cze","title":"func defaultTickValues(formatter: Formatter?) -> [String]","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/domaincontains(_:)","title":"func domainContains(Self.InputType) -> Bool","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/invert(_:to:)","title":"func invert(Self.OutputType, to: Self.OutputType) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/invert(_:to:reversed:)","title":"func invert(Self.OutputType, to: Self.OutputType, reversed: Bool) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/scale(_:to:)","title":"func scale(Self.InputType, to: Self.OutputType) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/scale(_:to:reversed:)","title":"func scale(Self.InputType, to: Self.OutputType, reversed: Bool) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/ticks(rangelower:rangehigher:formatter:)-1skhl","title":"func ticks(rangeLower: Self.OutputType, rangeHigher: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/ticks(rangelower:rangehigher:formatter:)-7c9l7","title":"func ticks(rangeLower: Self.OutputType, rangeHigher: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/ticks(reversed:rangelower:rangehigher:formatter:)-40l2z","title":"func ticks(reversed: Bool, rangeLower: Self.OutputType, rangeHigher: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/ticks(reversed:rangelower:rangehigher:formatter:)-58uhv","title":"func ticks(reversed: Bool, rangeLower: Self.OutputType, rangeHigher: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/ticksfromvalues(_:reversed:from:to:formatter:)","title":"func ticksFromValues([Self.InputType], reversed: Bool, from: Self.OutputType, to: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/transformagainstdomain(_:)","title":"func transformAgainstDomain(Self.InputType) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/validtickvalues(_:formatter:)","title":"func validTickValues([Self.InputType], formatter: Formatter?) -> [String]","type":"method"}],"path":"\/documentation\/swiftvizscale\/continuousscale\/continuousscaleprotocol-implementations","title":"ContinuousScaleProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/continuousscale\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/swiftvizscale\/continuousscale\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/swiftvizscale\/continuousscale","title":"ContinuousScale","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/continuousscaletype\/linear","title":"case linear","type":"case"},{"path":"\/documentation\/swiftvizscale\/continuousscaletype\/log","title":"case log","type":"case"},{"path":"\/documentation\/swiftvizscale\/continuousscaletype\/power(_:)","title":"case power(Double)","type":"case"},{"path":"\/documentation\/swiftvizscale\/continuousscaletype\/radial","title":"case radial","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/continuousscaletype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/swiftvizscale\/continuousscaletype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/swiftvizscale\/continuousscaletype","title":"ContinuousScaleType","type":"enum"},{"children":[{"title":"Domain Transform Values","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/domaindatatransform\/none","title":"case none","type":"case"},{"path":"\/documentation\/swiftvizscale\/domaindatatransform\/clamp","title":"case clamp","type":"case"},{"path":"\/documentation\/swiftvizscale\/domaindatatransform\/drop","title":"case drop","type":"case"},{"title":"Comparing Transform Settings","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/domaindatatransform\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/domaindatatransform\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/swiftvizscale\/domaindatatransform\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/swiftvizscale\/domaindatatransform","title":"DomainDataTransform","type":"enum"},{"title":"Discrete Scales","type":"groupMarker"},{"children":[{"title":"Creating a Band Scale","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/bandscale\/init(_:paddinginner:paddingouter:round:reversed:from:to:)","title":"init([CategoryType], paddingInner: OutputType, paddingOuter: OutputType, round: Bool, reversed: Bool, from: OutputType?, to: OutputType?)","type":"init"},{"title":"Updating Scales","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/bandscale\/domain(_:)","title":"func domain([CategoryType]) -> BandScale<CategoryType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/bandscale\/round(_:)","title":"func round(Bool) -> BandScale<CategoryType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/bandscale\/paddinginner(_:)","title":"func paddingInner(OutputType) -> BandScale<CategoryType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/bandscale\/paddingouter(_:)","title":"func paddingOuter(OutputType) -> BandScale<CategoryType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/bandscale\/range(_:)","title":"func range(ClosedRange<OutputType>) -> BandScale<CategoryType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/bandscale\/range(lower:higher:)","title":"func range(lower: OutputType, higher: OutputType) -> BandScale<CategoryType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/bandscale\/range(reversed:_:)","title":"func range(reversed: Bool, ClosedRange<OutputType>) -> BandScale<CategoryType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/bandscale\/range(reversed:lower:higher:)","title":"func range(reversed: Bool, lower: OutputType, higher: OutputType) -> BandScale<CategoryType, OutputType>","type":"method"},{"title":"Inspecting Scales","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/bandscale\/domain","title":"let domain: [CategoryType]","type":"property"},{"path":"\/documentation\/swiftvizscale\/bandscale\/round","title":"let round: Bool","type":"property"},{"path":"\/documentation\/swiftvizscale\/bandscale\/paddinginner","title":"let paddingInner: OutputType","type":"property"},{"path":"\/documentation\/swiftvizscale\/bandscale\/paddingouter","title":"let paddingOuter: OutputType","type":"property"},{"path":"\/documentation\/swiftvizscale\/bandscale\/reversed","title":"let reversed: Bool","type":"property"},{"path":"\/documentation\/swiftvizscale\/bandscale\/rangelower","title":"let rangeLower: OutputType?","type":"property"},{"path":"\/documentation\/swiftvizscale\/bandscale\/rangehigher","title":"let rangeHigher: OutputType?","type":"property"},{"path":"\/documentation\/swiftvizscale\/bandscale\/scaletype","title":"let scaleType: DiscreteScaleType","type":"property"},{"title":"Converting Values","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/bandscale\/scale(_:)","title":"func scale(CategoryType) -> Band<CategoryType, OutputType>?","type":"method"},{"path":"\/documentation\/swiftvizscale\/bandscale\/scale(_:from:to:)","title":"func scale(CategoryType, from: OutputType, to: OutputType) -> Band<CategoryType, OutputType>?","type":"method"},{"path":"\/documentation\/swiftvizscale\/bandscale\/scale(_:reversed:from:to:)","title":"func scale(CategoryType, reversed: Bool, from: OutputType, to: OutputType) -> Band<CategoryType, OutputType>?","type":"method"},{"path":"\/documentation\/swiftvizscale\/bandscale\/invert(_:)-63wv8","title":"func invert(OutputType) -> CategoryType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/bandscale\/invert(_:)-9z1xu","title":"func invert(Band<CategoryType, OutputType>) -> CategoryType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/bandscale\/invert(_:from:to:)","title":"func invert(OutputType, from: OutputType, to: OutputType) -> CategoryType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/bandscale\/invert(_:reversed:from:to:)","title":"func invert(OutputType, reversed: Bool, from: OutputType, to: OutputType) -> CategoryType?","type":"method"},{"title":"Creating Ticks","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/bandscale\/ticks(rangelower:rangehigher:formatter:)","title":"func ticks(rangeLower: BandScale<CategoryType, OutputType>.RangeType, rangeHigher: BandScale<CategoryType, OutputType>.RangeType, formatter: Formatter?) -> [Tick<BandScale<CategoryType, OutputType>.RangeType>]","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/bandscale\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/swiftvizscale\/bandscale\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/bandscale\/defaulttickvalues(formatter:)","title":"func defaultTickValues(formatter: Formatter?) -> [String]","type":"method"},{"path":"\/documentation\/swiftvizscale\/bandscale\/ticks(rangelower:rangehigher:formatter:)","title":"func ticks(rangeLower: BandScale<CategoryType, OutputType>.RangeType, rangeHigher: BandScale<CategoryType, OutputType>.RangeType, formatter: Formatter?) -> [Tick<BandScale<CategoryType, OutputType>.RangeType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/bandscale\/ticks(reversed:rangelower:rangehigher:formatter:)","title":"func ticks(reversed: Bool, rangeLower: BandScale<CategoryType, OutputType>.RangeType, rangeHigher: BandScale<CategoryType, OutputType>.RangeType, formatter: Formatter?) -> [Tick<BandScale<CategoryType, OutputType>.RangeType>]","type":"method"}],"path":"\/documentation\/swiftvizscale\/bandscale\/discretescale-implementations","title":"DiscreteScale Implementations","type":"symbol"}],"path":"\/documentation\/swiftvizscale\/bandscale","title":"BandScale","type":"struct"},{"children":[{"title":"Inspecting a Band","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/band\/higher","title":"let higher: RangeType","type":"property"},{"path":"\/documentation\/swiftvizscale\/band\/middle","title":"var middle: RangeType","type":"property"},{"path":"\/documentation\/swiftvizscale\/band\/lower","title":"let lower: RangeType","type":"property"},{"path":"\/documentation\/swiftvizscale\/band\/value","title":"let value: EnclosedType","type":"property"}],"path":"\/documentation\/swiftvizscale\/band","title":"Band","type":"struct"},{"children":[{"title":"Creating a Band Scale","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/pointscale\/init(_:padding:round:reversed:from:to:)","title":"init([CategoryType], padding: OutputType, round: Bool, reversed: Bool, from: OutputType?, to: OutputType?)","type":"init"},{"title":"Updating Scales","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/pointscale\/domain(_:)","title":"func domain([CategoryType]) -> PointScale<CategoryType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/pointscale\/round(_:)","title":"func round(Bool) -> PointScale<CategoryType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/pointscale\/padding(_:)","title":"func padding(OutputType) -> PointScale<CategoryType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/pointscale\/range(_:)","title":"func range(ClosedRange<OutputType>) -> PointScale<CategoryType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/pointscale\/range(lower:higher:)","title":"func range(lower: OutputType, higher: OutputType) -> PointScale<CategoryType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/pointscale\/range(reversed:_:)","title":"func range(reversed: Bool, ClosedRange<OutputType>) -> PointScale<CategoryType, OutputType>","type":"method"},{"path":"\/documentation\/swiftvizscale\/pointscale\/range(reversed:lower:higher:)","title":"func range(reversed: Bool, lower: OutputType, higher: OutputType) -> PointScale<CategoryType, OutputType>","type":"method"},{"title":"Inspecting Scales","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/pointscale\/domain","title":"let domain: [CategoryType]","type":"property"},{"path":"\/documentation\/swiftvizscale\/pointscale\/round","title":"let round: Bool","type":"property"},{"path":"\/documentation\/swiftvizscale\/pointscale\/padding","title":"let padding: OutputType","type":"property"},{"path":"\/documentation\/swiftvizscale\/pointscale\/reversed","title":"let reversed: Bool","type":"property"},{"path":"\/documentation\/swiftvizscale\/pointscale\/rangelower","title":"let rangeLower: OutputType?","type":"property"},{"path":"\/documentation\/swiftvizscale\/pointscale\/rangehigher","title":"let rangeHigher: OutputType?","type":"property"},{"path":"\/documentation\/swiftvizscale\/pointscale\/scaletype","title":"let scaleType: DiscreteScaleType","type":"property"},{"title":"Converting Values","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/pointscale\/scale(_:)","title":"func scale(CategoryType) -> OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/pointscale\/scale(_:from:to:)","title":"func scale(CategoryType, from: OutputType, to: OutputType) -> OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/pointscale\/scale(_:reversed:from:to:)","title":"func scale(CategoryType, reversed: Bool, from: OutputType, to: OutputType) -> OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/pointscale\/invert(_:)","title":"func invert(OutputType) -> CategoryType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/pointscale\/invert(_:from:to:)","title":"func invert(OutputType, from: OutputType, to: OutputType) -> CategoryType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/pointscale\/invert(_:reversed:from:to:)","title":"func invert(OutputType, reversed: Bool, from: OutputType, to: OutputType) -> CategoryType?","type":"method"},{"title":"Creating Ticks","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/pointscale\/ticks(rangelower:rangehigher:formatter:)","title":"func ticks(rangeLower: PointScale<CategoryType, OutputType>.RangeType, rangeHigher: PointScale<CategoryType, OutputType>.RangeType, formatter: Formatter?) -> [Tick<PointScale<CategoryType, OutputType>.RangeType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/pointscale\/ticks(reversed:rangelower:rangehigher:formatter:)","title":"func ticks(reversed: Bool, rangeLower: PointScale<CategoryType, OutputType>.RangeType, rangeHigher: PointScale<CategoryType, OutputType>.RangeType, formatter: Formatter?) -> [Tick<PointScale<CategoryType, OutputType>.RangeType>]","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/pointscale\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/swiftvizscale\/pointscale\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/pointscale\/defaulttickvalues(formatter:)","title":"func defaultTickValues(formatter: Formatter?) -> [String]","type":"method"},{"path":"\/documentation\/swiftvizscale\/pointscale\/ticks(rangelower:rangehigher:formatter:)","title":"func ticks(rangeLower: PointScale<CategoryType, OutputType>.RangeType, rangeHigher: PointScale<CategoryType, OutputType>.RangeType, formatter: Formatter?) -> [Tick<PointScale<CategoryType, OutputType>.RangeType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/pointscale\/ticks(reversed:rangelower:rangehigher:formatter:)","title":"func ticks(reversed: Bool, rangeLower: PointScale<CategoryType, OutputType>.RangeType, rangeHigher: PointScale<CategoryType, OutputType>.RangeType, formatter: Formatter?) -> [Tick<PointScale<CategoryType, OutputType>.RangeType>]","type":"method"}],"path":"\/documentation\/swiftvizscale\/pointscale\/discretescale-implementations","title":"DiscreteScale Implementations","type":"symbol"}],"path":"\/documentation\/swiftvizscale\/pointscale","title":"PointScale","type":"struct"},{"children":[{"title":"Inspecting Scales","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/discretescale\/domain","title":"var domain: [Self.InputType]","type":"property"},{"path":"\/documentation\/swiftvizscale\/discretescale\/rangehigher","title":"var rangeHigher: Self.RangeType?","type":"property"},{"path":"\/documentation\/swiftvizscale\/discretescale\/rangelower","title":"var rangeLower: Self.RangeType?","type":"property"},{"path":"\/documentation\/swiftvizscale\/discretescale\/scaletype","title":"var scaleType: DiscreteScaleType","type":"property"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/discretescaletype\/band","title":"case band","type":"case"},{"path":"\/documentation\/swiftvizscale\/discretescaletype\/point","title":"case point","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/discretescaletype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/swiftvizscale\/discretescaletype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/swiftvizscale\/discretescaletype","title":"DiscreteScaleType","type":"enum"},{"title":"Creating Ticks","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/discretescale\/ticks(rangelower:rangehigher:formatter:)","title":"func ticks(rangeLower: Self.RangeType, rangeHigher: Self.RangeType, formatter: Formatter?) -> [Tick<Self.RangeType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/discretescale\/ticks(reversed:rangelower:rangehigher:formatter:)","title":"func ticks(reversed: Bool, rangeLower: Self.RangeType, rangeHigher: Self.RangeType, formatter: Formatter?) -> [Tick<Self.RangeType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/discretescale\/defaulttickvalues(formatter:)","title":"func defaultTickValues(formatter: Formatter?) -> [String]","type":"method"}],"path":"\/documentation\/swiftvizscale\/discretescale","title":"DiscreteScale","type":"protocol"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/discretescaletype\/band","title":"case band","type":"case"},{"path":"\/documentation\/swiftvizscale\/discretescaletype\/point","title":"case point","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/discretescaletype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/swiftvizscale\/discretescaletype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/swiftvizscale\/discretescaletype","title":"DiscreteScaleType","type":"enum"},{"title":"Ticks","type":"groupMarker"},{"children":[{"title":"Creating Ticks","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/tick\/init(value:location:formatter:)-62lbu","title":"init<T>(value: T, location: OutputType, formatter: Formatter?)","type":"init"},{"path":"\/documentation\/swiftvizscale\/tick\/init(value:location:formatter:)-8v5fg","title":"init?<T>(value: T, location: OutputType, formatter: Formatter?)","type":"init"},{"title":"Inspecting Ticks","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/tick\/label","title":"let label: String","type":"property"},{"path":"\/documentation\/swiftvizscale\/tick\/rangelocation","title":"let rangeLocation: OutputType","type":"property"}],"path":"\/documentation\/swiftvizscale\/tick","title":"Tick","type":"struct"},{"title":"Supporting Types","type":"groupMarker"},{"children":[{"title":"Updating Scales","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/scale\/domain(_:)","title":"func domain([Self.InputType]) -> Self","type":"method"},{"path":"\/documentation\/swiftvizscale\/scale\/range(lower:higher:)","title":"func range(lower: Self.RangeType, higher: Self.RangeType) -> Self","type":"method"},{"path":"\/documentation\/swiftvizscale\/scale\/range(_:)","title":"func range(ClosedRange<Self.RangeType>) -> Self","type":"method"},{"path":"\/documentation\/swiftvizscale\/scale\/range(lower:higher:)","title":"func range(lower: Self.RangeType, higher: Self.RangeType) -> Self","type":"method"},{"path":"\/documentation\/swiftvizscale\/scale\/range(reversed:_:)","title":"func range(reversed: Bool, ClosedRange<Self.RangeType>) -> Self","type":"method"},{"path":"\/documentation\/swiftvizscale\/scale\/range(reversed:lower:higher:)","title":"func range(reversed: Bool, lower: Self.RangeType, higher: Self.RangeType) -> Self","type":"method"},{"title":"Converting Values","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/scale\/scale(_:)","title":"func scale(Self.InputType) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/scale\/invert(_:)","title":"func invert(Self.OutputType) -> Self.InputType?","type":"method"},{"title":"Scale Types","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/scale\/inputtype","title":"InputType","type":"associatedtype"},{"path":"\/documentation\/swiftvizscale\/scale\/outputtype","title":"OutputType","type":"associatedtype"},{"path":"\/documentation\/swiftvizscale\/scale\/rangetype","title":"RangeType","type":"associatedtype"}],"path":"\/documentation\/swiftvizscale\/scale","title":"Scale","type":"protocol"},{"children":[{"title":"Generating Nice Numbers","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/nicevalue\/niceversion(for:trendtowardszero:)","title":"static func niceVersion(for: Self.NumberType, trendTowardsZero: Bool) -> Self.NumberType","type":"method"},{"path":"\/documentation\/swiftvizscale\/nicevalue\/numbertype","title":"NumberType","type":"associatedtype"},{"title":"Creating Ranges of Nice Numbers","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/nicevalue\/rangeofnicevalues(min:max:ofsize:)","title":"static func rangeOfNiceValues(min: Self.NumberType, max: Self.NumberType, ofSize: Int) -> [Self.NumberType]","type":"method"},{"path":"\/documentation\/swiftvizscale\/nicevalue\/niceminstepmax(min:max:ofsize:)","title":"static func niceMinStepMax(min: Self.NumberType, max: Self.NumberType, ofSize: Int) -> (Self.NumberType, Self.NumberType, Self.NumberType)","type":"method"},{"path":"\/documentation\/swiftvizscale\/nicevalue\/niceminimumvalueforrange(min:max:)","title":"static func niceMinimumValueForRange(min: Self.NumberType, max: Self.NumberType) -> Self.NumberType","type":"method"}],"path":"\/documentation\/swiftvizscale\/nicevalue","title":"NiceValue","type":"protocol"},{"children":[{"title":"Casting Values to and from Double","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/convertiblewithdouble\/fromdouble(_:)","title":"static func fromDouble(Double) -> Self","type":"method"},{"path":"\/documentation\/swiftvizscale\/convertiblewithdouble\/todouble()","title":"func toDouble() -> Double","type":"method"}],"path":"\/documentation\/swiftvizscale\/convertiblewithdouble","title":"ConvertibleWithDouble","type":"protocol"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/desiredticks","title":"var desiredTicks: Int","type":"property"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/domainhigher","title":"var domainHigher: Self.InputType","type":"property"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/domainlower","title":"var domainLower: Self.InputType","type":"property"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/rangehigher","title":"var rangeHigher: Self.OutputType?","type":"property"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/rangelower","title":"var rangeLower: Self.OutputType?","type":"property"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/reversed","title":"var reversed: Bool","type":"property"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/scaletype","title":"var scaleType: ContinuousScaleType","type":"property"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/transformtype","title":"var transformType: DomainDataTransform","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/defaulttickvalues(formatter:)-6ggcw","title":"func defaultTickValues(formatter: Formatter?) -> [String]","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/defaulttickvalues(formatter:)-80gsy","title":"func defaultTickValues(formatter: Formatter?) -> [String]","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/domain(_:)","title":"func domain(ClosedRange<Self.InputType>) -> Self","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/domain(_:nice:)","title":"func domain([Self.InputType], nice: Bool) -> Self","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/domain(lower:higher:)","title":"func domain(lower: Self.InputType, higher: Self.InputType) -> Self","type":"method"},{"children":[{"children":[{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/domaincontains(_:)-2pfui","title":"func domainContains(Self.InputType) -> Bool","type":"method"}],"title":"ContinuousScaleProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/domaincontains(_:)-5zby1","title":"func domainContains(Self.InputType) -> Bool","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/invert(_:)","title":"func invert(Self.OutputType) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/invert(_:from:to:)","title":"func invert(Self.OutputType, from: Self.OutputType, to: Self.OutputType) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/invert(_:reversed:from:to:)","title":"func invert(Self.OutputType, reversed: Bool, from: Self.OutputType, to: Self.OutputType) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/invert(_:to:)","title":"func invert(Self.OutputType, to: Self.OutputType) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/invert(_:to:reversed:)","title":"func invert(Self.OutputType, to: Self.OutputType, reversed: Bool) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/range(_:)","title":"func range(ClosedRange<Self.OutputType>) -> Self","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/range(lower:higher:)","title":"func range(lower: Self.RangeType, higher: Self.RangeType) -> Self","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/range(reversed:_:)","title":"func range(reversed: Bool, ClosedRange<Self.OutputType>) -> Self","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/range(reversed:lower:higher:)","title":"func range(reversed: Bool, lower: Self.RangeType, higher: Self.RangeType) -> Self","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/scale(_:)","title":"func scale(Self.InputType) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/scale(_:from:to:)","title":"func scale(Self.InputType, from: Self.OutputType, to: Self.OutputType) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/scale(_:reversed:from:to:)","title":"func scale(Self.InputType, reversed: Bool, from: Self.OutputType, to: Self.OutputType) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/scale(_:to:)","title":"func scale(Self.InputType, to: Self.OutputType) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/scale(_:to:reversed:)","title":"func scale(Self.InputType, to: Self.OutputType, reversed: Bool) -> Self.OutputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/ticks(rangelower:rangehigher:formatter:)-2dbxl","title":"func ticks(rangeLower: Self.OutputType, rangeHigher: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/ticks(rangelower:rangehigher:formatter:)-chf4","title":"func ticks(rangeLower: Self.OutputType, rangeHigher: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/ticks(reversed:rangelower:rangehigher:formatter:)-1ftxm","title":"func ticks(reversed: Bool, rangeLower: Self.OutputType, rangeHigher: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/ticks(reversed:rangelower:rangehigher:formatter:)-5ot51","title":"func ticks(reversed: Bool, rangeLower: Self.OutputType, rangeHigher: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/ticksfromvalues(_:reversed:from:to:formatter:)","title":"func ticksFromValues([Self.InputType], reversed: Bool, from: Self.OutputType, to: Self.OutputType, formatter: Formatter?) -> [Tick<Self.OutputType>]","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/transform(_:)","title":"func transform(DomainDataTransform) -> Self","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/transformagainstdomain(_:)","title":"func transformAgainstDomain(Self.InputType) -> Self.InputType?","type":"method"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/validtickvalues(_:formatter:)","title":"func validTickValues([Self.InputType], formatter: Formatter?) -> [String]","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/swiftvizscale\/continuousscaleprotocol","title":"ContinuousScaleProtocol","type":"protocol"}],"path":"\/documentation\/swiftvizscale","title":"SwiftVizScale","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}