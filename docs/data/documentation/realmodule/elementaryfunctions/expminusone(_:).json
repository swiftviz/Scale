{
  "abstract" : [
    {
      "text" : "exp(x) - 1, computed in such a way as to maintain accuracy for small x.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions\/expMinusOne(_:)"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:10RealModule19ElementaryFunctionsP11expMinusOneyxxFZ",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "static"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "keyword",
        "text" : "func"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "expMinusOne"
      },
      {
        "kind" : "text",
        "text" : "("
      },
      {
        "kind" : "typeIdentifier",
        "text" : "Self"
      },
      {
        "kind" : "text",
        "text" : ") -> "
      },
      {
        "kind" : "typeIdentifier",
        "text" : "Self"
      }
    ],
    "modules" : [
      {
        "name" : "RealModule"
      }
    ],
    "required" : true,
    "role" : "symbol",
    "roleHeading" : "Type Method",
    "symbolKind" : "method",
    "title" : "expMinusOne(_:)"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "static"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "keyword",
              "text" : "func"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "expMinusOne"
            },
            {
              "kind" : "text",
              "text" : "("
            },
            {
              "kind" : "externalParam",
              "text" : "_"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "internalParam",
              "text" : "x"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Self"
            },
            {
              "kind" : "text",
              "text" : ") -> "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Self"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "discussion",
          "level" : 2,
          "text" : "Discussion",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "When ",
              "type" : "text"
            },
            {
              "code" : "x",
              "type" : "codeVoice"
            },
            {
              "text" : " is close to zero, the expression ",
              "type" : "text"
            },
            {
              "code" : ".exp(x) - 1",
              "type" : "codeVoice"
            },
            {
              "text" : " suffers from",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "catastrophic cancellation and the result will not have full accuracy.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : ".expMinusOne(x)",
              "type" : "codeVoice"
            },
            {
              "text" : " function gives you a means to address this problem.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "As an example, consider the expression ",
              "type" : "text"
            },
            {
              "code" : "(x + 1)*exp(x) - 1",
              "type" : "codeVoice"
            },
            {
              "text" : ".  When ",
              "type" : "text"
            },
            {
              "code" : "x",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "is smaller than ",
              "type" : "text"
            },
            {
              "code" : ".ulpOfOne",
              "type" : "codeVoice"
            },
            {
              "text" : ", this expression evaluates to ",
              "type" : "text"
            },
            {
              "code" : "0.0",
              "type" : "codeVoice"
            },
            {
              "text" : ", when it",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "should actually round to ",
              "type" : "text"
            },
            {
              "code" : "2*x",
              "type" : "codeVoice"
            },
            {
              "text" : ". We can get a full-accuracy result by",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "using the following instead:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let t = .expMinusOne(x)",
            "return x*(t+1) + t       \/\/ x*exp(x) + (exp(x)-1) = (x+1)*exp(x) - 1"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "This re-written expression delivers an accurate result for all values",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "of ",
              "type" : "text"
            },
            {
              "code" : "x",
              "type" : "codeVoice"
            },
            {
              "text" : ", not just for small values.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "See-also:",
          "level" : 2,
          "text" : "See also:",
          "type" : "heading"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "exp()",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "exp2()",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " (for types conforming to ",
                      "type" : "text"
                    },
                    {
                      "code" : "RealFunctions",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "exp10()",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " (for types conforming to ",
                      "type" : "text"
                    },
                    {
                      "code" : "RealFunctions",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ")",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 2,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/realmodule\/elementaryfunctions\/expminusone(_:)"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://com.github.swiftviz.SwiftVizScale/documentation/RealModule": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "RealModule",
  "type" : "topic",
  "url" : "\/documentation\/realmodule"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/RealModule/ElementaryFunctions": {
  "abstract" : [
    {
      "text" : "A type that has elementary functions available.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ElementaryFunctions"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ElementaryFunctions"
    }
  ],
  "role" : "symbol",
  "title" : "ElementaryFunctions",
  "type" : "topic",
  "url" : "\/documentation\/realmodule\/elementaryfunctions"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/RealModule/ElementaryFunctions/expMinusOne(_:)": {
  "abstract" : [
    {
      "text" : "exp(x) - 1, computed in such a way as to maintain accuracy for small x.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "expMinusOne"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Self"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Self"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions\/expMinusOne(_:)",
  "kind" : "symbol",
  "required" : true,
  "role" : "symbol",
  "title" : "expMinusOne(_:)",
  "type" : "topic",
  "url" : "\/documentation\/realmodule\/elementaryfunctions\/expminusone(_:)"
}
}
}