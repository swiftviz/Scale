{
  "abstract" : [
    {
      "text" : "A complex number represented by real and imaginary parts.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:13ComplexModule0A0V",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "struct"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "Complex"
      }
    ],
    "modules" : [
      {
        "name" : "ComplexModule"
      }
    ],
    "navigatorTitle" : [
      {
        "kind" : "identifier",
        "text" : "Complex"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Structure",
    "symbolKind" : "struct",
    "title" : "Complex"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "attribute",
              "text" : "@frozen"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "keyword",
              "text" : "struct"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "Complex"
            },
            {
              "kind" : "text",
              "text" : "<"
            },
            {
              "kind" : "genericParameter",
              "text" : "RealType"
            },
            {
              "kind" : "text",
              "text" : "> "
            },
            {
              "kind" : "keyword",
              "text" : "where"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "RealType"
            },
            {
              "kind" : "text",
              "text" : " : "
            },
            {
              "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/Real",
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:10RealModule0A0P",
              "text" : "Real"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "TODO: introductory text on complex numbers",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Implementation-notes:",
          "level" : 2,
          "text" : "Implementation notes:",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "This type does not provide heterogeneous real\/complex arithmetic,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "not even the natural vector-space operations like real * complex.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "There are two reasons for this choice: first, Swift broadly avoids",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "mixed-type arithmetic when the operation can be adequately expressed",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "by a conversion and homogeneous arithmetic. Second, with the current",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "typechecker rules, it would lead to undesirable ambiguity in common",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "expressions (see README.md for more details).",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Unlike C’s ",
              "type" : "text"
            },
            {
              "code" : "_Complex",
              "type" : "codeVoice"
            },
            {
              "text" : " and C++’s ",
              "type" : "text"
            },
            {
              "code" : "std::complex<>",
              "type" : "codeVoice"
            },
            {
              "text" : " types, we do not",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "attempt to make meaningful semantic distinctions between different",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "representations of infinity or NaN. Any Complex value with at least",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "one non-finite component is simply “non-finite”. In as much as",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "possible, we use the semantics of the point at infinity on the",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Riemann sphere for such values. This approach simplifies the number of",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "edge cases that need to be considered for multiplication, division, and",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the elementary functions considerably.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "code" : ".magnitude",
              "type" : "codeVoice"
            },
            {
              "text" : " does not return the Euclidean norm; it uses the “infinity",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "norm” (",
              "type" : "text"
            },
            {
              "code" : "max(|real|,|imaginary|)",
              "type" : "codeVoice"
            },
            {
              "text" : ") instead. There are two reasons for this",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "choice: first, it’s simply faster to compute on most hardware. Second,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "there exist values for which the Euclidean norm cannot be represented",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "(consider a number with ",
              "type" : "text"
            },
            {
              "code" : ".real",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : ".imaginary",
              "type" : "codeVoice"
            },
            {
              "text" : " both equal to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "RealType.greatestFiniteMagnitude",
              "type" : "codeVoice"
            },
            {
              "text" : "; the Euclidean norm would be",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : ".sqrt(2) * .greatestFiniteMagnitude",
              "type" : "codeVoice"
            },
            {
              "text" : ", which overflows). Using",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "the infinity norm avoids this problem entirely without significant",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "downsides. You can access the Euclidean norm using the ",
              "type" : "text"
            },
            {
              "code" : "length",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "property.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "relationshipsSections" : [
    {
      "identifiers" : [
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/AlgebraicField",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/s18AdditiveArithmeticP",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/s28CustomDebugStringConvertibleP",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/s23CustomStringConvertibleP",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/Se",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/SE",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/SQ",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/s27ExpressibleByIntegerLiteralP",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/SH",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/Sj",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/s13SignedNumericP"
      ],
      "kind" : "relationships",
      "title" : "Conforms To",
      "type" : "conformsTo"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 2,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "identifiers" : [
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/init(_:)-4csd3",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/init(_:)-5aesj",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/init(_:)-80jml",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/init(_:_:)",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/init(exactly:)-767k9",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/init(imaginary:)",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/init(length:phase:)"
      ],
      "title" : "Initializers"
    },
    {
      "identifiers" : [
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/canonicalized",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/conjugate",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/imaginary",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/isFinite",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/isNormal",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/isSubnormal",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/isZero",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/length",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/lengthSquared",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/normalized",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/phase",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/polar",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/real",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/unsafeLengthSquared"
      ],
      "title" : "Instance Properties"
    },
    {
      "identifiers" : [
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/i",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/infinity",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/one"
      ],
      "title" : "Type Properties"
    },
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/AdditiveArithmetic-Implementations",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/AlgebraicField-Implementations",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/CustomDebugStringConvertible-Implementations",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/CustomStringConvertible-Implementations",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/Decodable-Implementations",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/ElementaryFunctions-Implementations",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/Encodable-Implementations",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/Equatable-Implementations",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/ExpressibleByIntegerLiteral-Implementations",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/Hashable-Implementations",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/Numeric-Implementations",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/SignedNumeric-Implementations"
      ],
      "title" : "Default Implementations"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/complexmodule\/complex"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://com.github.swiftviz.SwiftVizScale/SE": {
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/SE",
  "title" : "Swift.Encodable",
  "type" : "unresolvable"
},
"doc://com.github.swiftviz.SwiftVizScale/SH": {
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/SH",
  "title" : "Swift.Hashable",
  "type" : "unresolvable"
},
"doc://com.github.swiftviz.SwiftVizScale/SQ": {
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/SQ",
  "title" : "Swift.Equatable",
  "type" : "unresolvable"
},
"doc://com.github.swiftviz.SwiftVizScale/Se": {
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/Se",
  "title" : "Swift.Decodable",
  "type" : "unresolvable"
},
"doc://com.github.swiftviz.SwiftVizScale/Sj": {
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/Sj",
  "title" : "Swift.Numeric",
  "type" : "unresolvable"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "ComplexModule",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex": {
  "abstract" : [
    {
      "text" : "A complex number represented by real and imaginary parts.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Complex"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Complex"
    }
  ],
  "role" : "symbol",
  "title" : "Complex",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/AdditiveArithmetic-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/AdditiveArithmetic-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "AdditiveArithmetic Implementations",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/additivearithmetic-implementations"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/AlgebraicField-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/AlgebraicField-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "AlgebraicField Implementations",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/algebraicfield-implementations"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/CustomDebugStringConvertible-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/CustomDebugStringConvertible-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "CustomDebugStringConvertible Implementations",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/customdebugstringconvertible-implementations"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/CustomStringConvertible-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/CustomStringConvertible-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "CustomStringConvertible Implementations",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/customstringconvertible-implementations"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/Decodable-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/Decodable-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Decodable Implementations",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/decodable-implementations"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/ElementaryFunctions-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/ElementaryFunctions-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "ElementaryFunctions Implementations",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/elementaryfunctions-implementations"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/Encodable-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/Encodable-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Encodable Implementations",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/encodable-implementations"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/Equatable-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/Equatable-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Equatable Implementations",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/equatable-implementations"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/ExpressibleByIntegerLiteral-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/ExpressibleByIntegerLiteral-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "ExpressibleByIntegerLiteral Implementations",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/expressiblebyintegerliteral-implementations"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/Hashable-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/Hashable-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Hashable Implementations",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/hashable-implementations"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/Numeric-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/Numeric-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Numeric Implementations",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/numeric-implementations"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/SignedNumeric-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/SignedNumeric-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "SignedNumeric Implementations",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/signednumeric-implementations"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/canonicalized": {
  "abstract" : [
    {
      "text" : "A “canonical” representation of the value.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "canonicalized"
    },
    {
      "kind" : "text",
      "text" : ": `Self`"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/canonicalized",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "canonicalized",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/canonicalized"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/conjugate": {
  "abstract" : [
    {
      "text" : "The complex conjugate of this value.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "conjugate"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13ComplexModule0A0V",
      "text" : "Complex"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/conjugate",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "conjugate",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/conjugate"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/i": {
  "abstract" : [
    {
      "text" : "The imaginary unit.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "i"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13ComplexModule0A0V",
      "text" : "Complex"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/i",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "i",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/i"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/imaginary": {
  "abstract" : [
    {
      "text" : "The imaginary part of this complex value.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "imaginary"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13ComplexModule0A0V8RealTypexmfp",
      "text" : "RealType"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/imaginary",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "imaginary",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/imaginary"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/infinity": {
  "abstract" : [
    {
      "text" : "The point at infinity.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "infinity"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13ComplexModule0A0V",
      "text" : "Complex"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/infinity",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "infinity",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/infinity"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/init(_:)-4csd3": {
  "abstract" : [
    {
      "text" : "The complex number with specified real part and zero imaginary part.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "Other"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13ComplexModule0A0VyACyxGqd__cSzRd__lufc5OtherL_qd__mfp",
      "text" : "Other"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/init(_:)-4csd3",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(_:)",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/init(_:)-4csd3"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/init(_:)-5aesj": {
  "abstract" : [
    {
      "text" : "The complex number with specified real part and zero imaginary part.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13ComplexModule0A0V8RealTypexmfp",
      "text" : "RealType"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/init(_:)-5aesj",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(_:)",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/init(_:)-5aesj"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/init(_:)-80jml": {
  "abstract" : [
    {
      "code" : "other",
      "type" : "codeVoice"
    },
    {
      "text" : " rounded to the nearest representable value of this type.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : " and ",
        "type" : "text"
      },
      {
        "code" : "BinaryFloatingPoint",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "Other"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13ComplexModule0A0V",
      "text" : "Complex"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13ComplexModule0A0VAASBRzrlEyACyxGACyqd__Gc04RealB00C0Rd__SBRd__lufc5OtherL_qd__mfp",
      "text" : "Other"
    },
    {
      "kind" : "text",
      "text" : ">)"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/init(_:)-80jml",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(_:)",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/init(_:)-80jml"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/init(_:_:)": {
  "abstract" : [
    {
      "text" : "A complex number constructed by specifying the real and imaginary parts.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13ComplexModule0A0V8RealTypexmfp",
      "text" : "RealType"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13ComplexModule0A0V8RealTypexmfp",
      "text" : "RealType"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/init(_:_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(_:_:)",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/init(_:_:)"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/init(exactly:)-767k9": {
  "abstract" : [
    {
      "code" : "other",
      "type" : "codeVoice"
    },
    {
      "text" : ", if it can be represented exactly in this type; otherwise ",
      "type" : "text"
    },
    {
      "code" : "nil",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : " and ",
        "type" : "text"
      },
      {
        "code" : "BinaryFloatingPoint",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "?<"
    },
    {
      "kind" : "genericParameter",
      "text" : "Other"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "externalParam",
      "text" : "exactly"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13ComplexModule0A0V",
      "text" : "Complex"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13ComplexModule0A0VAASBRzrlE7exactlyACyxGSgACyqd__G_tc04RealB00D0Rd__SBRd__lufc5OtherL_qd__mfp",
      "text" : "Other"
    },
    {
      "kind" : "text",
      "text" : ">)"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/init(exactly:)-767k9",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(exactly:)",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/init(exactly:)-767k9"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/init(imaginary:)": {
  "abstract" : [
    {
      "text" : "The complex number with specified imaginary part and zero real part.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "imaginary"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13ComplexModule0A0V8RealTypexmfp",
      "text" : "RealType"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/init(imaginary:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(imaginary:)",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/init(imaginary:)"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/init(length:phase:)": {
  "abstract" : [
    {
      "text" : "Creates a complex value specified with polar coordinates.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "length"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13ComplexModule0A0V8RealTypexmfp",
      "text" : "RealType"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "phase"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13ComplexModule0A0V8RealTypexmfp",
      "text" : "RealType"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/init(length:phase:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(length:phase:)",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/init(length:phase:)"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/isFinite": {
  "abstract" : [
    {
      "text" : "True if this value is finite.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "isFinite"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/isFinite",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "isFinite",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/isfinite"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/isNormal": {
  "abstract" : [
    {
      "text" : "True if this value is normal.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "isNormal"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/isNormal",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "isNormal",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/isnormal"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/isSubnormal": {
  "abstract" : [
    {
      "text" : "True if this value is subnormal.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "isSubnormal"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/isSubnormal",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "isSubnormal",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/issubnormal"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/isZero": {
  "abstract" : [
    {
      "text" : "True if this value is zero.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "isZero"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/isZero",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "isZero",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/iszero"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/length": {
  "abstract" : [
    {
      "text" : "The Euclidean norm (a.k.a. 2-norm, ",
      "type" : "text"
    },
    {
      "code" : "sqrt(real*real + imaginary*imaginary)",
      "type" : "codeVoice"
    },
    {
      "text" : ").",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "length"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13ComplexModule0A0V8RealTypexmfp",
      "text" : "RealType"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/length",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "length",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/length"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/lengthSquared": {
  "abstract" : [
    {
      "text" : "The squared length ",
      "type" : "text"
    },
    {
      "code" : "(real*real + imaginary*imaginary)",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "lengthSquared"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13ComplexModule0A0V8RealTypexmfp",
      "text" : "RealType"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/lengthSquared",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "lengthSquared",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/lengthsquared"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/normalized": {
  "abstract" : [
    {
      "text" : "A normalized complex number with the same phase as this value.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "normalized"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13ComplexModule0A0V",
      "text" : "Complex"
    },
    {
      "kind" : "text",
      "text" : "?"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/normalized",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "normalized",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/normalized"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/one": {
  "abstract" : [
    {
      "text" : "The multiplicative identity, with real part one and imaginary part zero.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "one"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13ComplexModule0A0V",
      "text" : "Complex"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/one",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "one",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/one"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/phase": {
  "abstract" : [
    {
      "text" : "The phase (angle, or “argument”).",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "phase"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13ComplexModule0A0V8RealTypexmfp",
      "text" : "RealType"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/phase",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "phase",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/phase"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/polar": {
  "abstract" : [
    {
      "text" : "The length and phase (or polar coordinates) of this value.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "polar"
    },
    {
      "kind" : "text",
      "text" : ": (length"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13ComplexModule0A0V8RealTypexmfp",
      "text" : "RealType"
    },
    {
      "kind" : "text",
      "text" : ", phase"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13ComplexModule0A0V8RealTypexmfp",
      "text" : "RealType"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/polar",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "polar",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/polar"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/real": {
  "abstract" : [
    {
      "text" : "The real part of this complex value.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "real"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13ComplexModule0A0V8RealTypexmfp",
      "text" : "RealType"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/real",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "real",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/real"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/unsafeLengthSquared": {
  "abstract" : [

  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "deprecated" : true,
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "unsafeLengthSquared"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:13ComplexModule0A0V8RealTypexmfp",
      "text" : "RealType"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/unsafeLengthSquared",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "unsafeLengthSquared",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/unsafelengthsquared"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/RealModule/AlgebraicField": {
  "abstract" : [
    {
      "text" : "A type modeling an algebraic ",
      "type" : "text"
    },
    {
      "identifier" : "https:\/\/en.wikipedia.org\/wiki\/Field_(mathematics)",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : ". Refines the ",
      "type" : "text"
    },
    {
      "code" : "SignedNumeric",
      "type" : "codeVoice"
    },
    {
      "text" : " protocol,",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "adding division.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "AlgebraicField"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/AlgebraicField",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "AlgebraicField"
    }
  ],
  "role" : "symbol",
  "title" : "AlgebraicField",
  "type" : "topic",
  "url" : "\/documentation\/realmodule\/algebraicfield"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/RealModule/ElementaryFunctions": {
  "abstract" : [
    {
      "text" : "A type that has elementary functions available.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "RealType",
        "type" : "codeVoice"
      },
      {
        "text" : " conforms to ",
        "type" : "text"
      },
      {
        "code" : "Real",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ElementaryFunctions"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ElementaryFunctions"
    }
  ],
  "role" : "symbol",
  "title" : "ElementaryFunctions",
  "type" : "topic",
  "url" : "\/documentation\/realmodule\/elementaryfunctions"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/RealModule/Real": {
  "abstract" : [
    {
      "text" : "A type that models the real numbers.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Real"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/Real",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Real"
    }
  ],
  "role" : "symbol",
  "title" : "Real",
  "type" : "topic",
  "url" : "\/documentation\/realmodule\/real"
},
"doc://com.github.swiftviz.SwiftVizScale/s13SignedNumericP": {
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/s13SignedNumericP",
  "title" : "Swift.SignedNumeric",
  "type" : "unresolvable"
},
"doc://com.github.swiftviz.SwiftVizScale/s18AdditiveArithmeticP": {
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/s18AdditiveArithmeticP",
  "title" : "Swift.AdditiveArithmetic",
  "type" : "unresolvable"
},
"doc://com.github.swiftviz.SwiftVizScale/s23CustomStringConvertibleP": {
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/s23CustomStringConvertibleP",
  "title" : "Swift.CustomStringConvertible",
  "type" : "unresolvable"
},
"doc://com.github.swiftviz.SwiftVizScale/s27ExpressibleByIntegerLiteralP": {
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/s27ExpressibleByIntegerLiteralP",
  "title" : "Swift.ExpressibleByIntegerLiteral",
  "type" : "unresolvable"
},
"doc://com.github.swiftviz.SwiftVizScale/s28CustomDebugStringConvertibleP": {
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/s28CustomDebugStringConvertibleP",
  "title" : "Swift.CustomDebugStringConvertible",
  "type" : "unresolvable"
},
"https://en.wikipedia.org/wiki/Field_(mathematics)": {
  "identifier" : "https:\/\/en.wikipedia.org\/wiki\/Field_(mathematics)",
  "title" : "field",
  "titleInlineContent" : [
    {
      "text" : "field",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/en.wikipedia.org\/wiki\/Field_(mathematics)"
}
}
}