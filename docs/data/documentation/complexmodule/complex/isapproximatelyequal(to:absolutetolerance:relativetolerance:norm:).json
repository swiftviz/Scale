{
  "abstract" : [
    {
      "text" : "Test if ",
      "type" : "text"
    },
    {
      "code" : "self",
      "type" : "codeVoice"
    },
    {
      "text" : " and ",
      "type" : "text"
    },
    {
      "code" : "other",
      "type" : "codeVoice"
    },
    {
      "text" : " are approximately equal with specified",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "tolerances and norm.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex",
        "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/AdditiveArithmetic-Implementations"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:norm:)"
  },
  "kind" : "symbol",
  "metadata" : {
    "extendedModule" : "Swift",
    "externalID" : "s:s18AdditiveArithmeticP10RealModuleE20isApproximatelyEqual2to17absoluteTolerance08relativeJ04normSbx_qd__qd__qd__xXEtSFRd__lF::SYNTHESIZED::s:13ComplexModule0A0V",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "func"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "isApproximatelyEqual"
      },
      {
        "kind" : "text",
        "text" : "<"
      },
      {
        "kind" : "genericParameter",
        "text" : "Magnitude"
      },
      {
        "kind" : "text",
        "text" : ">("
      },
      {
        "kind" : "externalParam",
        "text" : "to"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "text" : "Self"
      },
      {
        "kind" : "text",
        "text" : ", "
      },
      {
        "kind" : "externalParam",
        "text" : "absoluteTolerance"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "text" : "Magnitude"
      },
      {
        "kind" : "text",
        "text" : ", "
      },
      {
        "kind" : "externalParam",
        "text" : "relativeTolerance"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "text" : "Magnitude"
      },
      {
        "kind" : "text",
        "text" : ", "
      },
      {
        "kind" : "externalParam",
        "text" : "norm"
      },
      {
        "kind" : "text",
        "text" : ": ("
      },
      {
        "kind" : "typeIdentifier",
        "text" : "Self"
      },
      {
        "kind" : "text",
        "text" : ") -> "
      },
      {
        "kind" : "typeIdentifier",
        "text" : "Magnitude"
      },
      {
        "kind" : "text",
        "text" : ") -> "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:Sb",
        "text" : "Bool"
      }
    ],
    "modules" : [
      {
        "name" : "ComplexModule"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Instance Method",
    "symbolKind" : "method",
    "title" : "isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:norm:)"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "func"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "isApproximatelyEqual"
            },
            {
              "kind" : "text",
              "text" : "<"
            },
            {
              "kind" : "genericParameter",
              "text" : "Magnitude"
            },
            {
              "kind" : "text",
              "text" : ">("
            },
            {
              "kind" : "externalParam",
              "text" : "to"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "internalParam",
              "text" : "other"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Self"
            },
            {
              "kind" : "text",
              "text" : ", "
            },
            {
              "kind" : "externalParam",
              "text" : "absoluteTolerance"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Magnitude"
            },
            {
              "kind" : "text",
              "text" : ", "
            },
            {
              "kind" : "externalParam",
              "text" : "relativeTolerance"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Magnitude"
            },
            {
              "kind" : "text",
              "text" : " = 0, "
            },
            {
              "kind" : "externalParam",
              "text" : "norm"
            },
            {
              "kind" : "text",
              "text" : ": ("
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Self"
            },
            {
              "kind" : "text",
              "text" : ") -> "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Magnitude"
            },
            {
              "kind" : "text",
              "text" : ") -> "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:Sb",
              "text" : "Bool"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "keyword",
              "text" : "where"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "typeIdentifier",
              "text" : "Magnitude"
            },
            {
              "kind" : "text",
              "text" : " : "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:SF",
              "text" : "FloatingPoint"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "kind" : "parameters",
      "parameters" : [
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The value to which ",
                  "type" : "text"
                },
                {
                  "code" : "self",
                  "type" : "codeVoice"
                },
                {
                  "text" : " is compared.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "other"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The absolute tolerance to use in the comparison.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "text" : "This value should be non-negative and finite.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "This constraint on is only checked in debug builds, because a",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "mathematically well-defined result exists for any tolerance, even",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "one out of range.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "absoluteTolerance"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The relative tolerance to use in the comparison.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Defaults to zero.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "text" : "This value should be non-negative and less than or equal to 1.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "This constraint on is only checked in debug builds, because a",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "mathematically well-defined result exists for any tolerance,",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "even one out of range.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "relativeTolerance"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "The norm to use for the comparison.",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "Defaults to ",
                  "type" : "text"
                },
                {
                  "code" : "\\.magnitude",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "inlineContent" : [
                {
                  "text" : "For example, if we wanted to test if a complex value was inside a",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "circle of radius 0.001 centered at (1 + 0i), we could use:",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            },
            {
              "code" : [
                "z.isApproximatelyEqual(",
                "  to: 1,",
                "  absoluteTolerance: 0.001,",
                "  norm: \\.length",
                ")"
              ],
              "syntax" : null,
              "type" : "codeListing"
            },
            {
              "inlineContent" : [
                {
                  "text" : "(if we used the default norm, ",
                  "type" : "text"
                },
                {
                  "code" : ".magnitude",
                  "type" : "codeVoice"
                },
                {
                  "text" : ", we would be testing if",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "code" : "z",
                  "type" : "codeVoice"
                },
                {
                  "text" : " were inside a square region instead.)",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "name" : "norm"
        }
      ]
    },
    {
      "content" : [
        {
          "anchor" : "discussion",
          "level" : 2,
          "text" : "Discussion",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "code" : "true",
              "type" : "codeVoice"
            },
            {
              "text" : " if ",
              "type" : "text"
            },
            {
              "code" : "self",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "other",
              "type" : "codeVoice"
            },
            {
              "text" : " are equal, or if they are finite and either",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "norm(self - other) <= absoluteTolerance"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "or",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "norm(self - other) <= relativeTolerance * scale"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "where ",
              "type" : "text"
            },
            {
              "code" : "scale",
              "type" : "codeVoice"
            },
            {
              "text" : " is ",
              "type" : "text"
            },
            {
              "code" : "max(norm(self), norm(other))",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Mathematical-Properties:",
          "level" : 2,
          "text" : "Mathematical Properties:",
          "type" : "heading"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:norm:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "is ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "reflexive",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " for non-exceptional values (such as NaN).",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:norm:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "is ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "symmetric",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : ".",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:norm:)",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "is ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "not",
                          "type" : "text"
                        }
                      ],
                      "type" : "strong"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "transitive",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : ". Because of this, approximately equality is",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "not an equivalence relation",
                          "type" : "text"
                        }
                      ],
                      "type" : "strong"
                    },
                    {
                      "text" : ", even when restricted to",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "non-exceptional values.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "This means that you must not use approximate equality to implement",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "a conformance to Equatable, as it will violate the invariants of",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "code written against that protocol.",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "text" : "For any point ",
                      "type" : "text"
                    },
                    {
                      "code" : "a",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : ", the set of values that compare approximately equal",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "to ",
                      "type" : "text"
                    },
                    {
                      "code" : "a",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " is ",
                      "type" : "text"
                    },
                    {
                      "inlineContent" : [
                        {
                          "text" : "convex",
                          "type" : "text"
                        }
                      ],
                      "type" : "emphasis"
                    },
                    {
                      "text" : " (under the assumption that ",
                      "type" : "text"
                    },
                    {
                      "code" : "norm",
                      "type" : "codeVoice"
                    },
                    {
                      "text" : " implements a",
                      "type" : "text"
                    },
                    {
                      "text" : " ",
                      "type" : "text"
                    },
                    {
                      "text" : "valid norm, which cannot be checked by this function or a protocol).",
                      "type" : "text"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        },
        {
          "anchor" : "See-Also:",
          "level" : 2,
          "text" : "See Also:",
          "type" : "heading"
        },
        {
          "items" : [
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "isApproximatelyEqual(to:[relativeTolerance:norm:])",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            },
            {
              "content" : [
                {
                  "inlineContent" : [
                    {
                      "code" : "isApproximatelyEqual(to:absoluteTolerance:[relativeTolerance:])",
                      "type" : "codeVoice"
                    }
                  ],
                  "type" : "paragraph"
                }
              ]
            }
          ],
          "type" : "unorderedList"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 2,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/complexmodule\/complex\/isapproximatelyequal(to:absolutetolerance:relativetolerance:norm:)"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "ComplexModule",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex": {
  "abstract" : [
    {
      "text" : "A complex number represented by real and imaginary parts.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Complex"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Complex"
    }
  ],
  "role" : "symbol",
  "title" : "Complex",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/AdditiveArithmetic-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/AdditiveArithmetic-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "AdditiveArithmetic Implementations",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/additivearithmetic-implementations"
},
"doc://com.github.swiftviz.SwiftVizScale/documentation/ComplexModule/Complex/isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:norm:)": {
  "abstract" : [
    {
      "text" : "Test if ",
      "type" : "text"
    },
    {
      "code" : "self",
      "type" : "codeVoice"
    },
    {
      "text" : " and ",
      "type" : "text"
    },
    {
      "code" : "other",
      "type" : "codeVoice"
    },
    {
      "text" : " are approximately equal with specified",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "tolerances and norm.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "isApproximatelyEqual"
    },
    {
      "kind" : "text",
      "text" : "<"
    },
    {
      "kind" : "genericParameter",
      "text" : "Magnitude"
    },
    {
      "kind" : "text",
      "text" : ">("
    },
    {
      "kind" : "externalParam",
      "text" : "to"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Self"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "absoluteTolerance"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Magnitude"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "relativeTolerance"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Magnitude"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "norm"
    },
    {
      "kind" : "text",
      "text" : ": ("
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Self"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "Magnitude"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    }
  ],
  "identifier" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:norm:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:norm:)",
  "type" : "topic",
  "url" : "\/documentation\/complexmodule\/complex\/isapproximatelyequal(to:absolutetolerance:relativetolerance:norm:)"
}
}
}