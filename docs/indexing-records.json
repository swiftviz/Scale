[
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/\/(_:_:)-94u8w"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The (approximate) quotient a\/b. ",
    "summary" : "The (approximate) quotient a\/b.",
    "title" : "\/(_:_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/cos(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The cosine of x.  Discussion For real types, x may be interpreted as an angle measured in radians. See also: sin() tan() acos()",
    "summary" : "The cosine of x.",
    "title" : "cos(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/scale(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transforms the input value using a linear function to the square of the resulting value in the range you provide.  Return Value A value mapped to the range you provide. A value in the domain of the scale.",
    "summary" : "Transforms the input value using a linear function to the square of the resulting value in the range you provide.",
    "title" : "scale(_:)"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions\/exp(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The exponential function e^x whose base e is the base of the natural logarithm.  See also: expMinusOne() exp2() (for types conforming to RealFunctions) exp10() (for types conforming to RealFunctions)",
    "summary" : "The exponential function e^x whose base e is the base of the natural logarithm.",
    "title" : "exp(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PointScale\/rangeLower"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The lower value of the range into which the discrete values map. ",
    "summary" : "The lower value of the range into which the discrete values map.",
    "title" : "rangeLower"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/BandScale\/paddingOuter"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The amount of padding outside of the bands. ",
    "summary" : "The amount of padding outside of the bands.",
    "title" : "paddingOuter"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/AnyContinuousScale\/domainHigher"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The upper bound of the input domain. ",
    "summary" : "The upper bound of the input domain.",
    "title" : "domainHigher"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PointScale\/domain(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the domain set to the values you provide.  An array of the types the scale maps into.",
    "summary" : "Returns a new scale with the domain set to the values you provide.",
    "title" : "domain(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ConvertibleWithDouble\/toDouble()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts a value of the type into an instance of Double  Return Value A double value matching the value you provided.",
    "summary" : "Converts a value of the type into an instance of Double",
    "title" : "toDouble()"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/RealFunctions\/gamma(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The gamma function Γ(x).  See also: logGamma() signGamma()",
    "summary" : "The gamma function Γ(x).",
    "title" : "gamma(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/domainExtent"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The distance or length between the upper and lower bounds of the input domain. ",
    "summary" : "The distance or length between the upper and lower bounds of the input domain.",
    "title" : "domainExtent"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A linear scale for transforming and mapping continuous input values within a domain to output values you provide. ",
    "summary" : "A linear scale for transforming and mapping continuous input values within a domain to output values you provide.",
    "title" : "RadialScale"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/Tick\/formatter"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available. ",
    "summary" : "No overview available.",
    "title" : "formatter"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/AnyContinuousScale\/scale(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts a value comparing it to the input domain, transforming the value, and mapping it between the range values you provide.  Return Value A value within the bounds of the range values you provide, or nil if the value was dropped. The value to be scaled. Discussion Before scaling the value, the scale may transform or drop the value based on the setting of transformType.",
    "summary" : "Converts a value comparing it to the input domain, transforming the value, and mapping it between the range values you provide.",
    "title" : "scale(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/isZero"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "True if this value is zero.  Discussion A complex number is zero if both the real and imaginary components are zero. See also: .isFinite .isNormal .isSubnormal",
    "summary" : "True if this value is zero.",
    "title" : "isZero"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScale\/scaleType"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The type of continuous scale. ",
    "summary" : "The type of continuous scale.",
    "title" : "scaleType"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PointScale\/scale(_:from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Maps the discrete item into a range location.  Return Value A location along the range that indicates a point that matches with the value you provided, or nil if the value isn’t contained by the domain. A discrete item from the list provided as the domain for the scale. The lower value of the range into which the discrete values map. The upper value of the range into which the discrete values map.",
    "summary" : "Maps the discrete item into a range location.",
    "title" : "scale(_:from:to:)"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/RealFunctions\/exp10(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "10^x  See also: exp() expMinusOne() exp2() log10() pow()",
    "summary" : "10^x",
    "title" : "exp10(_:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScale\/invert(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts back from the output range to a value within the input domain.  Return Value A value within the bounds of the range values you provide, or nil if the value was dropped. The value to be scaled back from the range values to the domain. Discussion The inverse of scale(_:from:to:). After converting the data back to the domain range, the scale may transform or drop the value based on the setting of transformType.",
    "summary" : "Converts back from the output range to a value within the input domain.",
    "title" : "invert(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/BandScale\/scale(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Maps the discrete item into a band.  Return Value A band that wraps the category found in the domain with start and end values for the range of the band, or nil if the value isn’t contained by the domain. A discrete item from the list provided as the domain for the scale.",
    "summary" : "Maps the discrete item into a band.",
    "title" : "scale(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/domainContains(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a Boolean value that indicates whether the value you provided is within the scale’s domain.  Return Value true if the value is between the lower and upper domain values. The value to compare.",
    "summary" : "Returns a Boolean value that indicates whether the value you provided is within the scale’s domain.",
    "title" : "domainContains(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/rangeLower"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The lower bound of the input domain. ",
    "summary" : "The lower bound of the input domain.",
    "title" : "rangeLower"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/Tick\/init(value:location:formatter:)-200s1"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new tick.  The value at the tick’s location. The location of the tick within the range for a scale. Discussion If the location value you provide is NaN, the initializer returns nil.",
    "summary" : "Creates a new tick.",
    "title" : "init(value:location:formatter:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/Tick\/init(value:location:formatter:)-cjxk"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new tick  The value at the tick’s location. The location of the tick within the range for a scale.",
    "summary" : "Creates a new tick",
    "title" : "init(value:location:formatter:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/IntegerLiteralType"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from ExpressibleByIntegerLiteral.IntegerLiteralType. ",
    "summary" : "Inherited from ExpressibleByIntegerLiteral.IntegerLiteralType.",
    "title" : "Complex.IntegerLiteralType"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/AnyContinuousScale\/desiredTicks"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The number of requested tick marks for the scale. ",
    "summary" : "The number of requested tick marks for the scale.",
    "title" : "desiredTicks"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PointScale\/scale(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Maps the discrete item into a range location.  Return Value A location along the range that indicates a point that matches with the value you provided, or nil if the value isn’t contained by the domain. A discrete item from the list provided as the domain for the scale.",
    "summary" : "Maps the discrete item into a range location.",
    "title" : "scale(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/domainLower"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The lower bound of the input domain. ",
    "summary" : "The lower bound of the input domain.",
    "title" : "domainLower"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/transformType"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A transformation value that indicates whether the output vales are constrained to the min and max of the output range.  Discussion If true, values processed by the scale are constrained to the output range, and values processed backwards through the scale are constrained to the input domain.",
    "summary" : "A transformation value that indicates whether the output vales are constrained to the min and max of the output range.",
    "title" : "transformType"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/desiredTicks"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The number of ticks desired when creating the scale.  Discussion This number may not match the number of ticks returned by tickValues(_:from:to:)",
    "summary" : "The number of ticks desired when creating the scale.",
    "title" : "desiredTicks"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/init(integerLiteral:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from ExpressibleByIntegerLiteral.init(integerLiteral:). ",
    "summary" : "Inherited from ExpressibleByIntegerLiteral.init(integerLiteral:).",
    "title" : "init(integerLiteral:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/init(from:to:transform:desiredTicks:rangeLower:rangeHigher:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new linear scale for the upper and lower bounds of the domain you provide.  The lower bound for the scale’s domain. The upper bound for the scale’s domain. The transform constraint to apply when values fall outside the domain of the scale. The desired number of ticks when visually representing the scale.",
    "summary" : "Creates a new linear scale for the upper and lower bounds of the domain you provide.",
    "title" : "init(from:to:transform:desiredTicks:rangeLower:rangeHigher:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/BandScale\/invert(_:from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Maps the value from the range values you provide back to the discrete value that it matches.  Return Value The item that matches at that value, or nil if the point is within padding or outside the range of the scale. A value within the range of the scale. The lower value of the range into which the discrete values map. The upper value of the range into which the discrete values map.",
    "summary" : "Maps the value from the range values you provide back to the discrete value that it matches.",
    "title" : "invert(_:from:to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/init(_:transform:desiredTicks:rangeLower:rangeHigher:)-60q05"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new linear scale for the upper and lower bounds of the domain range you provide.  A range that represents the scale’s domain. The transform constraint to apply when values fall outside the domain of the scale. The desired number of ticks when visually representing the scale.",
    "summary" : "Creates a new linear scale for the upper and lower bounds of the domain range you provide.",
    "title" : "init(_:transform:desiredTicks:rangeLower:rangeHigher:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScaleType\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/BandScale\/scale(_:from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Maps the discrete item into a band with the range values you provide..  Return Value A band that wraps the category found in the domain with start and end values for the range of the band, or nil if the value isn’t contained by the domain. A discrete item from the list provided as the domain for the scale. The lower value of the range into which the discrete values map. The upper value of the range into which the discrete values map.",
    "summary" : "Maps the discrete item into a band with the range values you provide..",
    "title" : "scale(_:from:to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/SignedNumeric-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "SignedNumeric Implementations"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScale\/invert(_:from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts back from the output range to a value within the input domain.  Return Value A value within the bounds of the range values you provide, or nil if the value was dropped. The value to be scaled back from the range values to the domain. The lower bounding value of the range to transform from. The higher bounding value of the range to transform from. Discussion The inverse of scale(_:from:to:). After converting the data back to the domain range, the scale may transform or drop the value based on the setting of transformType.",
    "summary" : "Converts back from the output range to a value within the input domain.",
    "title" : "invert(_:from:to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/scaleType"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The type of continuous scale. ",
    "summary" : "The type of continuous scale.",
    "title" : "scaleType"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/Real\/ElementaryFunctions-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "ElementaryFunctions Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScale\/domainContains(_:)-7ghgo"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a Boolean value that indicates whether the value you provided is within the scale’s domain.  Return Value true if the value is between the lower and upper domain values. The value to compare.",
    "summary" : "Returns a Boolean value that indicates whether the value you provided is within the scale’s domain.",
    "title" : "domainContains(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/ticks(rangeLower:rangeHigher:)-8w4by"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns an array of the locations within the output range to locate ticks for the scale.  Return Value an Array of the values within the ClosedRange of range a ClosedRange representing the representing the range we are mapping the values into with the scale",
    "summary" : "Returns an array of the locations within the output range to locate ticks for the scale.",
    "title" : "ticks(rangeLower:rangeHigher:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/reciprocal-1twmy"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The reciprocal of this value, if it can be computed without undue overflow or underflow.  Discussion If z.reciprocal is non-nil, you can safely replace division by z with multiplication by this value. It is not advantageous to do this for an isolated division, but if you are dividing many values by a single denominator, this may sometimes be a significant performance win. A typical use case looks something like this:  Error Bounds: Unlike real types, when working with complex types, multiplying by the reciprocal instead of dividing cannot change the result. If the reciprocal is non-nil, the two computations are always equivalent.",
    "summary" : "The reciprocal of this value, if it can be computed without undue overflow or underflow.",
    "title" : "reciprocal"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/tan(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The tangent of x.  Discussion For real types, x may be interpreted as an angle measured in radians. See also: cos() sin() atan() atan2(y:x:) (for types conforming to RealFunctions) ",
    "summary" : "The tangent of x.",
    "title" : "tan(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/-(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from SignedNumeric.-(_:). ",
    "summary" : "Inherited from SignedNumeric.-(_:).",
    "title" : "-(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/AnyContinuousScale\/domainContains(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a Boolean value that indicates whether the value you provided is within the scale’s domain.  Return Value true if the value is between the lower and upper domain values. The value to compare.",
    "summary" : "Returns a Boolean value that indicates whether the value you provided is within the scale’s domain.",
    "title" : "domainContains(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/ticks(rangeLower:rangeHigher:)-9vifj"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns an array of the locations within the output range to locate ticks for the scale.  Return Value an Array of the values within the ClosedRange of range a ClosedRange representing the representing the range we are mapping the values into with the scale",
    "summary" : "Returns an array of the locations within the output range to locate ticks for the scale.",
    "title" : "ticks(rangeLower:rangeHigher:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/init(from:to:transform:desiredTicks:rangeLower:rangeHigher:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new logarithmic scale for the upper and lower bounds of the domain you provide.  The lower bound for the scale’s domain. The upper bound for the scale’s domain. The transform constraint to apply when values fall outside the domain of the scale. The desired number of ticks when visually representing the scale.",
    "summary" : "Creates a new logarithmic scale for the upper and lower bounds of the domain you provide.",
    "title" : "init(from:to:transform:desiredTicks:rangeLower:rangeHigher:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/Band\/lower"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available. ",
    "summary" : "No overview available.",
    "title" : "lower"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/ticks(rangeLower:rangeHigher:)-2bosk"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns an array of the locations within the output range to locate ticks for the scale.  Return Value an Array of the values within the ClosedRange of range a ClosedRange representing the representing the range we are mapping the values into with the scale",
    "summary" : "Returns an array of the locations within the output range to locate ticks for the scale.",
    "title" : "ticks(rangeLower:rangeHigher:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/rangeHigher"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The upper bound of the input domain. ",
    "summary" : "The upper bound of the input domain.",
    "title" : "rangeHigher"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/scale(_:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts a value comparing it to the input domain, transforming the value, and mapping it into values between 0 and to the upper bound you provide.  Return Value a value within the bounds of the range values you provide, or nil if the value was dropped. The value to be scaled. The higher bounding value of the range to transform from. Discussion This method is a convenience method that sets the lower value of the range is 0. Before scaling the value, the scale may transform or drop the value based on the setting of transformType.",
    "summary" : "Converts a value comparing it to the input domain, transforming the value, and mapping it into values between 0 and to the upper bound you provide.",
    "title" : "scale(_:to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PointScale\/init(_:padding:round:from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new point scale.  An array of the types the scale maps into. The amount of padding between the points. A Boolean value that indicates the scaled values are returned as rounded values. The lower value of the range into which the discrete values map. The upper value of the range into which the discrete values map.",
    "summary" : "Creates a new point scale.",
    "title" : "init(_:padding:round:from:to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PointScale\/padding"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The amount of padding between bands. ",
    "summary" : "The amount of padding between bands.",
    "title" : "padding"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/scale(_:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts a value comparing it to the input domain, transforming the value, and mapping it into values between 0 and to the upper bound you provide.  Return Value a value within the bounds of the range values you provide, or nil if the value was dropped. The value to be scaled. The higher bounding value of the range to transform from. Discussion This method is a convenience method that sets the lower value of the range is 0. Before scaling the value, the scale may transform or drop the value based on the setting of transformType.",
    "summary" : "Converts a value comparing it to the input domain, transforming the value, and mapping it into values between 0 and to the upper bound you provide.",
    "title" : "scale(_:to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/DomainDataTransform"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A value that represents how a scale handles data transformation that exceed the domain or range of the scale. ",
    "summary" : "A value that represents how a scale handles data transformation that exceed the domain or range of the scale.",
    "title" : "DomainDataTransform"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScaleType\/power(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available. ",
    "summary" : "No overview available.",
    "title" : "ContinuousScaleType.power(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScaleType\/radial"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available. ",
    "summary" : "No overview available.",
    "title" : "ContinuousScaleType.radial"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/scale(_:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts a value comparing it to the input domain, transforming the value, and mapping it into values between 0 and to the upper bound you provide.  Return Value a value within the bounds of the range values you provide, or nil if the value was dropped. The value to be scaled. The higher bounding value of the range to transform from. Discussion This method is a convenience method that sets the lower value of the range is 0. Before scaling the value, the scale may transform or drop the value based on the setting of transformType.",
    "summary" : "Converts a value comparing it to the input domain, transforming the value, and mapping it into values between 0 and to the upper bound you provide.",
    "title" : "scale(_:to:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/init(imaginary:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The complex number with specified imaginary part and zero real part.  Discussion Equivalent to Complex(0, imaginary).",
    "summary" : "The complex number with specified imaginary part and zero real part.",
    "title" : "init(imaginary:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/TickScale-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "TickScale Implementations"
  },
  {
    "headings" : [
      "Edge cases:",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/init(length:phase:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a complex value specified with polar coordinates.  Edge cases: Negative lengths are interpreted as reflecting the point through the origin, i.e.:  For any θ, even .infinity or .nan:  For any θ, even .infinity or .nan, if r is infinite then:  Otherwise, θ must be finite, or a precondition failure occurs. See also: .length .phase .polar",
    "summary" : "Creates a complex value specified with polar coordinates.",
    "title" : "init(length:phase:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/AnyContinuousScale\/range(lower:higher:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the range set to the values you provide.  Return Value A replica of the scale, with new range values. The lower bound for the scale’s range. The upper bound for the scale’s range.",
    "summary" : "Returns a new scale with the range set to the values you provide.",
    "title" : "range(lower:higher:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/TickScale\/ticks(rangeLower:rangeHigher:)-4ug0i"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns an array of the locations within the output range to locate ticks for the scale.  Return Value an Array of the values within the ClosedRange of range a ClosedRange representing the representing the range we are mapping the values into with the scale",
    "summary" : "Returns an array of the locations within the output range to locate ticks for the scale.",
    "title" : "ticks(rangeLower:rangeHigher:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/domainExtent"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The distance or length between the upper and lower bounds of the input domain. ",
    "summary" : "The distance or length between the upper and lower bounds of the input domain.",
    "title" : "domainExtent"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/ticks(rangeLower:rangeHigher:)-napq"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns an array of the locations within the output range to locate ticks for the scale.  Return Value an Array of the values within the ClosedRange of range a ClosedRange representing the representing the range we are mapping the values into with the scale",
    "summary" : "Returns an array of the locations within the output range to locate ticks for the scale.",
    "title" : "ticks(rangeLower:rangeHigher:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/init(from:to:exponent:transform:desiredTicks:rangeLower:rangeHigher:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new power scale for the upper and lower bounds of the domain you provide.  The lower bound for the scale’s domain. The upper bound for the scale’s domain. The exponent for the power transforming, defaulting to 1. The transform constraint to apply when values fall outside the domain of the scale. The desired number of ticks when visually representing the scale.",
    "summary" : "Creates a new power scale for the upper and lower bounds of the domain you provide.",
    "title" : "init(from:to:exponent:transform:desiredTicks:rangeLower:rangeHigher:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/Scale\/InputType"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The type used for the scale’s domain. ",
    "summary" : "The type used for the scale’s domain.",
    "title" : "InputType"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/scale(_:from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transforms the input value using a power function and maps the resulting value into the range you provide.  Return Value A value scaled by the power function, mapped to the range you provide. A value in the domain of the scale. The lower bound to the range to map to. The upper bound of the range to map to.",
    "summary" : "Transforms the input value using a power function and maps the resulting value into the range you provide.",
    "title" : "scale(_:from:to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/ContinuousScale-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "ContinuousScale Implementations"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions\/sin(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The sine of x.  Discussion For real types, x may be interpreted as an angle measured in radians. See also: cos() tan() asin()",
    "summary" : "The sine of x.",
    "title" : "sin(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/\/=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Replaces a with the (approximate) quotient a\/b. ",
    "summary" : "Replaces a with the (approximate) quotient a\/b.",
    "title" : "\/=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/DomainDataTransform\/clamp"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Data processed against a scale is clamped to the upper and lower values of the scale’s domain. ",
    "summary" : "Data processed against a scale is clamped to the upper and lower values of the scale’s domain.",
    "title" : "DomainDataTransform.clamp"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/BandScale\/round"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A Boolean value that indicates the scaled values are returned as rounded values. ",
    "summary" : "A Boolean value that indicates the scaled values are returned as rounded values.",
    "title" : "round"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/AnyContinuousScale\/scaleType"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The type of continuous scale. ",
    "summary" : "The type of continuous scale.",
    "title" : "scaleType"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/domainHigher"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The upper bound of the input domain. ",
    "summary" : "The upper bound of the input domain.",
    "title" : "domainHigher"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/canonicalized"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A “canonical” representation of the value.  Discussion For normal complex numbers with a RealType conforming to BinaryFloatingPoint (the common case), the result is simply this value unmodified. For zeros, the result has the representation (+0, +0). For infinite values, the result has the representation (+inf, +0). If the RealType admits non-canonical representations, the x and y components are canonicalized in the result. This is mainly useful for interoperation with other languages, where you may want to reduce each equivalence class to a single representative before passing across language boundaries, but it may also be useful for some serialization tasks. It’s also a useful implementation detail for some primitive operations.",
    "summary" : "A “canonical” representation of the value.",
    "title" : "canonicalized"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/Augmented\/fastTwoSum(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available. ",
    "summary" : "No overview available.",
    "title" : "fastTwoSum(_:_:)"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/Real\/sqrt(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The square root of x.  See also: pow() root()",
    "summary" : "The square root of x.",
    "title" : "sqrt(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/scale(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transforms the input value using a linear function to the resulting value into the range you provide.  Return Value A value mapped to the range you provide. A value in the domain of the scale. The lower bound to the range to map to. The upper bound of the range to map to.",
    "summary" : "Transforms the input value using a linear function to the resulting value into the range you provide.",
    "title" : "scale(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/RealFunctions\/hypot(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "sqrt(x*x + y*y), computed in a manner that avoids spurious overflow or underflow. ",
    "summary" : "sqrt(x*x + y*y), computed in a manner that avoids spurious overflow or underflow.",
    "title" : "hypot(_:_:)"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ConvertibleWithDouble"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A type that can be consistently converted to and from a Double.  Overview The protocol is used to constrain the types used within a scale and provide consistent casting for generic scale methods. This library provides support for the types Int, Float, CGFloat, and Double.",
    "summary" : "A type that can be consistently converted to and from a Double.",
    "title" : "ConvertibleWithDouble"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScale"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A type that maps continuous values from an input domain to an output range. ",
    "summary" : "A type that maps continuous values from an input domain to an output range.",
    "title" : "ContinuousScale"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/transformType"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A transformation value that indicates whether the output vales are constrained to the min and max of the output range.  Discussion If true, values processed by the scale are constrained to the output range, and values processed backwards through the scale are constrained to the input domain.",
    "summary" : "A transformation value that indicates whether the output vales are constrained to the min and max of the output range.",
    "title" : "transformType"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PointScale\/round(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the rounding set to the value you provide.  A Boolean value that indicates the scaled values are returned as rounded values.",
    "summary" : "Returns a new scale with the rounding set to the value you provide.",
    "title" : "round(_:)"
  },
  {
    "headings" : [
      "Overview",
      "See Also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/Real"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A type that models the real numbers.  Overview Types conforming to this protocol provide the arithmetic and utility operations defined by the FloatingPoint protocol, and provide all of the math functions defined by the ElementaryFunctions and RealFunctions protocols. This protocol does not add any additional conformances itself, but is very useful as a protocol against which to write generic code. For example, we can naturally write a generic implementation of a sigmoid function:  See Also: ElementaryFunctions RealFunctions AlgebraicField",
    "summary" : "A type that models the real numbers.",
    "title" : "Real"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/BandScale\/rangeHigher"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The upper value of the range into which the discrete values map. ",
    "summary" : "The upper value of the range into which the discrete values map.",
    "title" : "rangeHigher"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/domainContains(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a Boolean value that indicates whether the value you provided is within the scale’s domain.  Return Value true if the value is between the lower and upper domain values. The value to compare.",
    "summary" : "Returns a Boolean value that indicates whether the value you provided is within the scale’s domain.",
    "title" : "domainContains(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/BandScale\/paddingInner"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The amount of padding between bands. ",
    "summary" : "The amount of padding between bands.",
    "title" : "paddingInner"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A power scale created with a continuous input domain that provides methods to convert values within that domain to an output range. ",
    "summary" : "A power scale created with a continuous input domain that provides methods to convert values within that domain to an output range.",
    "title" : "PowerScale"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/Augmented"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A namespace for “augmented arithmetic” operations for types conforming to Real.  Overview Augmented arithmetic refers to a family of algorithms that represent the results of floating-point computations using multiple values such that either the error is minimized or the result is exact.",
    "summary" : "A namespace for “augmented arithmetic” operations for types conforming to Real.",
    "title" : "Augmented"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/hash(into:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Hashable.hash(into:). ",
    "summary" : "Inherited from Hashable.hash(into:).",
    "title" : "hash(into:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/ticks(rangeLower:rangeHigher:)-3xaat"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns an array of the locations within the output range to locate ticks for the scale.  Return Value an Array of the values within the ClosedRange of range a ClosedRange representing the representing the range we are mapping the values into with the scale",
    "summary" : "Returns an array of the locations within the output range to locate ticks for the scale.",
    "title" : "ticks(rangeLower:rangeHigher:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/ticks(rangeLower:rangeHigher:)-9y5mw"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns an array of the locations within the output range to locate ticks for the scale.  Return Value an Array of the values within the ClosedRange of range a ClosedRange representing the representing the range we are mapping the values into with the scale",
    "summary" : "Returns an array of the locations within the output range to locate ticks for the scale.",
    "title" : "ticks(rangeLower:rangeHigher:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/domainHigher"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The upper bound of the input domain. ",
    "summary" : "The upper bound of the input domain.",
    "title" : "domainHigher"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/Augmented\/twoProdFMA(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available. ",
    "summary" : "No overview available.",
    "title" : "twoProdFMA(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/scaleType"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The type of continuous scale. ",
    "summary" : "The type of continuous scale.",
    "title" : "scaleType"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/AnyContinuousScale\/invert(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts back from the output range to a value within the input domain.  Return Value A value within the bounds of the range values you provide, or nil if the value was dropped. The value to be scaled back from the range values to the domain. Discussion The inverse of scale(_:from:to:). After converting the data back to the domain range, the scale may transform or drop the value based on the setting of transformType.",
    "summary" : "Converts back from the output range to a value within the input domain.",
    "title" : "invert(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/range(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the range set to the values you provide.  Return Value A copy of the scale with the range values you provide. The range to apply as the scale’s range.",
    "summary" : "Returns a new scale with the range set to the values you provide.",
    "title" : "range(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/sinh(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The hyperbolic sine of x.  Discussion  See also: cosh() tanh() asinh()",
    "summary" : "The hyperbolic sine of x.",
    "title" : "sinh(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/invert(_:from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transforms a value within the range into the associated domain value.  Return Value A value linearly mapped from the range back into the domain. A value in the range of the scale. The lower bound to the range to map from. The upper bound to the range to map from.",
    "summary" : "Transforms a value within the range into the associated domain value.",
    "title" : "invert(_:from:to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/+(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from AdditiveArithmetic.+(_:). ",
    "summary" : "Inherited from AdditiveArithmetic.+(_:).",
    "title" : "+(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/init(exactly:)-282ck"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The complex number with specified real part and zero imaginary part, if it can be constructed without rounding. ",
    "summary" : "The complex number with specified real part and zero imaginary part, if it can be constructed without rounding.",
    "title" : "init(exactly:)"
  },
  {
    "headings" : [
      "Discussion",
      "Edge cases:",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/length"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The Euclidean norm (a.k.a. 2-norm, sqrt(real*real + imaginary*imaginary)).  Discussion This property takes care to avoid spurious over- or underflow in this computation. For example:  Note that it is still possible for this property to overflow, because the length can be as much as sqrt(2) times larger than either component, and thus may not be representable in the real type. For most use cases, you can use the cheaper .magnitude property (which computes the ∞-norm) instead, which always produces a representable result. Edge cases: If a complex value is not finite, its .length is infinity. See also: .magnitude .lengthSquared .phase .polar init(r:θ:)",
    "summary" : "The Euclidean norm (a.k.a. 2-norm, sqrt(real*real + imaginary*imaginary)).",
    "title" : "length"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/TickScale\/tickValues(_:from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts an array of values that matches the scale’s input type to a list of ticks that are within the scale’s domain.  Return Value A list of tick values validated against the domain, and range based on the setting of transformType an array of values of the Scale’s InputType The lower value of the range the scale maps to. The higher value of the range the scale maps to. Discussion Used for manually specifying a series of ticks that you want to have displayed. Values presented for display that are not within the domain of the scale are dropped. Values that scale outside of the range you provide are adjusted based on the setting of transformType.",
    "summary" : "Converts an array of values that matches the scale’s input type to a list of ticks that are within the scale’s domain.",
    "title" : "tickValues(_:from:to:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/ticks(rangeLower:rangeHigher:)-5zjwj"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns an array of the locations within the output range to locate ticks for the scale.  Return Value an Array of the values within the ClosedRange of range a ClosedRange representing the representing the range we are mapping the values into with the scale",
    "summary" : "Returns an array of the locations within the output range to locate ticks for the scale.",
    "title" : "ticks(rangeLower:rangeHigher:)"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions\/pow(_:_:)-2qmul"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "exp(y * log(x)) computed with additional internal precision.  See also: sqrt() root()",
    "summary" : "exp(y * log(x)) computed with additional internal precision.",
    "title" : "pow(_:_:)"
  },
  {
    "headings" : [
      "Edge cases:",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/polar"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The length and phase (or polar coordinates) of this value.  Edge cases: If the complex value is zero or non-finite, phase is .nan. If the complex value is non-finite, length is .infinity. See also: .length .phase init(r:θ:)",
    "summary" : "The length and phase (or polar coordinates) of this value.",
    "title" : "polar"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/range(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the range set to the values you provide.  Return Value A copy of the scale with the range values you provide. The range to apply as the scale’s range.",
    "summary" : "Returns a new scale with the range set to the values you provide.",
    "title" : "range(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/DomainDataTransform\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/CustomStringConvertible-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "CustomStringConvertible Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/DomainDataTransform\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/one"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The multiplicative identity, with real part one and imaginary part zero.  See also: .zero .i .infinity",
    "summary" : "The multiplicative identity, with real part one and imaginary part zero.",
    "title" : "one"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/DomainDataTransform\/drop"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Data processed against a scale is dropped if the value is outside of the scale’s domain. ",
    "summary" : "Data processed against a scale is dropped if the value is outside of the scale’s domain.",
    "title" : "DomainDataTransform.drop"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/BandScale\/domain"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An array of the types the scale maps into. ",
    "summary" : "An array of the types the scale maps into.",
    "title" : "domain"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PointScale\/domain"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "An array of the types the scale maps into. ",
    "summary" : "An array of the types the scale maps into.",
    "title" : "domain"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/ticks(rangeLower:rangeHigher:)-2i6ex"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns an array of the locations within the output range to locate ticks for the scale.  Return Value an Array of the values within the ClosedRange of range a ClosedRange representing the representing the range we are mapping the values into with the scale",
    "summary" : "Returns an array of the locations within the output range to locate ticks for the scale.",
    "title" : "ticks(rangeLower:rangeHigher:)"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/Real\/signGamma(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The sign of the gamma function, Γ(x).  Discussion For x >= 0, signGamma(x) is .plus. For negative x, signGamma(x) is .plus when x is an integer, and otherwise it is .minus whenever trunc(x) is even, and .plus when trunc(x) is odd. This function is used together with logGamma, which computes the logarithm of the absolute value of Γ(x), to recover the sign information. Not available on Windows targets. See also: gamma() logGamma()",
    "summary" : "The sign of the gamma function, Γ(x).",
    "title" : "signGamma(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/invert(_:from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transforms a value within the range into the associated domain value.  Return Value A value linearly mapped from the range back into the domain. A value in the range of the scale. The lower bound to the range to map from. The upper bound to the range to map from.",
    "summary" : "Transforms a value within the range into the associated domain value.",
    "title" : "invert(_:from:to:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/scale(_:from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transforms the input value using a linear function to the resulting value into the range you provide.  Return Value A value mapped to the range you provide. A value in the domain of the scale. The lower bound to the range to map to. The upper bound of the range to map to.",
    "summary" : "Transforms the input value using a linear function to the resulting value into the range you provide.",
    "title" : "scale(_:from:to:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/ticks(rangeLower:rangeHigher:)-8sxks"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns an array of the locations within the output range to locate ticks for the scale.  Return Value an Array of the values within the ClosedRange of range a ClosedRange representing the representing the range we are mapping the values into with the scale",
    "summary" : "Returns an array of the locations within the output range to locate ticks for the scale.",
    "title" : "ticks(rangeLower:rangeHigher:)"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions\/asin(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The arcsine  (inverse sine) of x.  Discussion For real types, the result may be interpreted as an angle measured in radians.  See also: acos() atan() sin()",
    "summary" : "The arcsine  (inverse sine) of x.",
    "title" : "asin(_:)"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions\/sqrt(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The square root of x.  See also: pow() root()",
    "summary" : "The square root of x.",
    "title" : "sqrt(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/range(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the range set to the values you provide.  Return Value A copy of the scale with the range values you provide. The range to apply as the scale’s range.",
    "summary" : "Returns a new scale with the range set to the values you provide.",
    "title" : "range(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScale\/domainHigher"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The upper bound of the input domain. ",
    "summary" : "The upper bound of the input domain.",
    "title" : "domainHigher"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/RealFunctions\/erfc(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The complimentary error function evaluated at x.  See also: erf()",
    "summary" : "The complimentary error function evaluated at x.",
    "title" : "erfc(_:)"
  },
  {
    "headings" : [
      "Overview",
      "See Also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/AlgebraicField"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A type modeling an algebraic field. Refines the SignedNumeric protocol, adding division.  Overview A field is a set on which addition, subtraction, multiplication, and division are defined, and behave basically like those operations on the real numbers. More precisely, a field is a commutative group under its addition, the non-zero elements of the field form a commutative group under its multiplication, and the distributitve law holds. Some common examples of fields include: the rational numbers the real numbers the complex numbers the integers modulo a prime The most familiar example of a thing that is not a field is the integers. This may be surprising, since integers seem to have addition, subtraction, multiplication and division. Why don’t they form a field? Because integer multiplication does not form a group; it’s commutative and associative, but integers do not have multiplicative inverses. I.e. if a is any integer other than 1 or -1, there is no integer b such that a*b = 1. The existence of inverses is requried to form a field. If a type T conforms to the Real protocol, then T and Complex<T> both conform to AlgebraicField. See Also: Real SignedNumeric Numeric AdditiveArithmetic",
    "summary" : "A type modeling an algebraic field. Refines the SignedNumeric protocol, adding division.",
    "title" : "AlgebraicField"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/AnyContinuousScale\/invert(_:from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts back from the output range to a value within the input domain.  Return Value A value within the bounds of the range values you provide, or nil if the value was dropped. The value to be scaled back from the range values to the domain. The lower bounding value of the range to transform from. The higher bounding value of the range to transform from. Discussion The inverse of scale(_:from:to:). After converting the data back to the domain range, the scale may transform or drop the value based on the setting of transformType.",
    "summary" : "Converts back from the output range to a value within the input domain.",
    "title" : "invert(_:from:to:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/transformAgainstDomain(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Processes a value against the scale, potentially constraining or dropping the value.  Return Value An updated value, or nil if the value was dropped. The value to transform against the domain of the scale. Discussion The value is transformed based on the scale’s transformType setting. transformType transform effect DomainDataTransform.none The method doesn’t adjusted or drop the value. DomainDataTransform.drop Values outside the scale’s domain are dropped. DomainDataTransform.clamp Values outside the scale’s domain are adjusted to match the highest or lowest values of the domain. ",
    "summary" : "Processes a value against the scale, potentially constraining or dropping the value.",
    "title" : "transformAgainstDomain(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/ticks(rangeLower:rangeHigher:)-8uzv5"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns an array of the locations within the output range to locate ticks for the scale.  Return Value an Array of the values within the ClosedRange of range a ClosedRange representing the representing the range we are mapping the values into with the scale",
    "summary" : "Returns an array of the locations within the output range to locate ticks for the scale.",
    "title" : "ticks(rangeLower:rangeHigher:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/init(_:transform:desiredTicks:rangeLower:rangeHigher:)-74r54"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new linear scale for the upper and lower bounds of the domain range you provide.  A range that represents the scale’s domain. The transform constraint to apply when values fall outside the domain of the scale. The desired number of ticks when visually representing the scale.",
    "summary" : "Creates a new linear scale for the upper and lower bounds of the domain range you provide.",
    "title" : "init(_:transform:desiredTicks:rangeLower:rangeHigher:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/TickScale\/desiredTicks"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The number of ticks desired when creating the scale.  Discussion This number may not match the number of ticks returned by tickValues(_:from:to:)",
    "summary" : "The number of ticks desired when creating the scale.",
    "title" : "desiredTicks"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScale\/transform(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the transform set to the value you provide.  Return Value A replica of the scale, updating the transformType. The transform constraint to apply when values fall outside the domain of the scale.",
    "summary" : "Returns a new scale with the transform set to the value you provide.",
    "title" : "transform(_:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/transformType"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A transformation value that indicates whether the output vales are constrained to the min and max of the output range.  Discussion If true, values processed by the scale are constrained to the output range, and values processed backwards through the scale are constrained to the input domain.",
    "summary" : "A transformation value that indicates whether the output vales are constrained to the min and max of the output range.",
    "title" : "transformType"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/rangeHigher"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The upper bound of the input domain. ",
    "summary" : "The upper bound of the input domain.",
    "title" : "rangeHigher"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/AnyContinuousScale\/transform(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the transform set to the value you provide.  Return Value A replica of the scale, updating the transformType. The transform constraint to apply when values fall outside the domain of the scale.",
    "summary" : "Returns a new scale with the transform set to the value you provide.",
    "title" : "transform(_:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/invert(_:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts a value comparing it to the upper value of a range, mapping it to the input domain, and inverting scale’s transform.  Return Value a value within the bounds of the range values you provide, or nil if the value was dropped. The value to be scaled back from the range values to the domain. The higher bounding value of the range to transform from. Discussion This method is a convenience method that sets the lower value of the range is 0. The inverse of scale(_:to:). After converting the data back to the domain range, the scale may transform or drop the value based on the setting of transformType.",
    "summary" : "Converts a value comparing it to the upper value of a range, mapping it to the input domain, and inverting scale’s transform.",
    "title" : "invert(_:to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/conjugate"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The complex conjugate of this value. ",
    "summary" : "The complex conjugate of this value.",
    "title" : "conjugate"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/TickScale-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "TickScale Implementations"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/AnyContinuousScale\/transformType"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A transformation value that indicates whether the output vales are constrained to the min and max of the output range.  Discussion If true, values processed by the scale are constrained to the output range, and values processed backwards through the scale are constrained to the input domain.",
    "summary" : "A transformation value that indicates whether the output vales are constrained to the min and max of the output range.",
    "title" : "transformType"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/Real\/cosMinusOne(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "cos(x) - 1, computed in such a way as to maintain accuracy for small x.  See also: ElementaryFunctions.expMinusOne()",
    "summary" : "cos(x) - 1, computed in such a way as to maintain accuracy for small x.",
    "title" : "cosMinusOne(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/AdditiveArithmetic-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "AdditiveArithmetic Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/+=(_:_:)-247oi"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from AdditiveArithmetic.+=(_:_:). ",
    "summary" : "Inherited from AdditiveArithmetic.+=(_:_:).",
    "title" : "+=(_:_:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/normalized"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A normalized complex number with the same phase as this value.  Discussion If such a value cannot be produced (because the phase of zero and infinity is undefined), nil is returned.",
    "summary" : "A normalized complex number with the same phase as this value.",
    "title" : "normalized"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PointScale\/range(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the range set to the range you provide.  The range of the values into which the discrete values map.",
    "summary" : "Returns a new scale with the range set to the range you provide.",
    "title" : "range(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PointScale\/range(from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the range set to the values you provide.  The lower value of the range into which the discrete values map. The upper value of the range into which the discrete values map.",
    "summary" : "Returns a new scale with the range set to the values you provide.",
    "title" : "range(from:to:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/AnyContinuousScale\/scale(_:from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts a value comparing it to the input domain, transforming the value, and mapping it between the range values you provide.  Return Value A value within the bounds of the range values you provide, or nil if the value was dropped. The value to be scaled. The lower bounding value of the range to transform to. The higher bounding value of the range to transform to. Discussion Before scaling the value, the scale may transform or drop the value based on the setting of transformType.",
    "summary" : "Converts a value comparing it to the input domain, transforming the value, and mapping it between the range values you provide.",
    "title" : "scale(_:from:to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/domainLower"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The lower bound of the input domain. ",
    "summary" : "The lower bound of the input domain.",
    "title" : "domainLower"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/AnyContinuousScale\/rangeLower"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The lower bound of the input domain. ",
    "summary" : "The lower bound of the input domain.",
    "title" : "rangeLower"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/TickScale-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "TickScale Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/Numeric-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "Numeric Implementations"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/AnyContinuousScale\/invert(_:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts a value comparing it to the upper value of a range, mapping it to the input domain, and inverting scale’s transform.  Return Value a value within the bounds of the range values you provide, or nil if the value was dropped. The value to be scaled back from the range values to the domain. The higher bounding value of the range to transform from. Discussion This method is a convenience method that sets the lower value of the range is 0. The inverse of scale(_:to:). After converting the data back to the domain range, the scale may transform or drop the value based on the setting of transformType.",
    "summary" : "Converts a value comparing it to the upper value of a range, mapping it to the input domain, and inverting scale’s transform.",
    "title" : "invert(_:to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/Band\/value"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available. ",
    "summary" : "No overview available.",
    "title" : "value"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/domainLower"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The lower bound of the input domain. ",
    "summary" : "The lower bound of the input domain.",
    "title" : "domainLower"
  },
  {
    "headings" : [
      "Discussion",
      "Mathematical Properties:",
      "See Also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Test if self and other are approximately equal with specified tolerances.  The value to which self is compared. The absolute tolerance to use in the comparison. This value should be non-negative and finite. This constraint on is only checked in debug builds, because a mathematically well-defined result exists for any tolerance, even one out of range. The relative tolerance to use in the comparison. Defaults to zero. This value should be non-negative and less than or equal to 1. This constraint on is only checked in debug builds, because a mathematically well-defined result exists for any tolerance, even one out of range. Discussion true if self and other are equal, or if they are finite and either  or  where scale is max(self.magnitude, other.magnitude). Mathematical Properties: isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:) is reflexive for non-exceptional values (such as NaN). isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:) is symmetric. isApproximatelyEqual(to:relativeTolerance:norm:) is not transitive. Because of this, approximately equality is not an equivalence relation, even when restricted to non-exceptional values. This means that you must not use approximate equality to implement a conformance to Equatable, as it will violate the invariants of code written against that protocol. For any point a, the set of values that compare approximately equal to a is convex. (Under the assumption that norm implements a valid norm, which cannot be checked by this function.) See Also: isApproximatelyEqual(to:[relativeTolerance:])",
    "summary" : "Test if self and other are approximately equal with specified tolerances.",
    "title" : "isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:)"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions\/sinh(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The hyperbolic sine of x.  Discussion  See also: cosh() tanh() asinh()",
    "summary" : "The hyperbolic sine of x.",
    "title" : "sinh(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/BandScale\/round(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the rounding set to the value you provide.  A Boolean value that indicates the scaled values are returned as rounded values.",
    "summary" : "Returns a new scale with the rounding set to the value you provide.",
    "title" : "round(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "Mathematical Properties:",
      "See Also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/isApproximatelyEqual(to:relativeTolerance:norm:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Test if self and other are approximately equal.  The value to which self is compared. The tolerance to use for the comparison. Defaults to .ulpOfOne.squareRoot(). This value should be non-negative and less than or equal to 1. This constraint on is only checked in debug builds, because a mathematically well-defined result exists for any tolerance, even one out of range. The norm to use for the comparison. Defaults to \\.magnitude. Discussion true if self and other are equal, or if they are finite and  where scale is  The default value of relativeTolerance is .ulpOfOne.squareRoot(), which corresponds to expecting “about half the digits” in the computed results to be good. This is the usual guidance in numerical analysis, if you don’t know anything about the computation being performed, but is not suitable for all use cases. Mathematical Properties: isApproximatelyEqual(to:relativeTolerance:norm:) is reflexive for non-exceptional values (such as NaN). isApproximatelyEqual(to:relativeTolerance:norm:) is symmetric. isApproximatelyEqual(to:relativeTolerance:norm:) is not transitive. Because of this, approximately equality is not an equivalence relation, even when restricted to non-exceptional values. This means that you must not use approximate equality to implement a conformance to Equatable, as it will violate the invariants of code written against that protocol. For any point a, the set of values that compare approximately equal to a is convex. (Under the assumption that the .magnitude property implements a valid norm.) isApproximatelyEqual(to:relativeTolerance:norm:) is scale invariant, so long as no underflow or overflow has occured, and no exceptional value is produced by the scaling. See Also: isApproximatelyEqual(to:absoluteTolerance:[relativeTolerance:norm:])",
    "summary" : "Test if self and other are approximately equal.",
    "title" : "isApproximatelyEqual(to:relativeTolerance:norm:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/BandScale\/range(from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the range set to the values you provide.  The lower value of the range into which the discrete values map. The upper value of the range into which the discrete values map.",
    "summary" : "Returns a new scale with the range set to the values you provide.",
    "title" : "range(from:to:)"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/root(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The nth root of x.  See also: pow() sqrt()",
    "summary" : "The nth root of x.",
    "title" : "root(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/zero-5ejwo"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from AdditiveArithmetic.zero. ",
    "summary" : "Inherited from AdditiveArithmetic.zero.",
    "title" : "zero"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/Tick\/id-40sis"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Identifiable.id. ",
    "summary" : "Inherited from Identifiable.id.",
    "title" : "id"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScale\/transformType"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A transformation value that indicates whether the output vales are constrained to the min and max of the output range.  Discussion If true, values processed by the scale are constrained to the output range, and values processed backwards through the scale are constrained to the input domain.",
    "summary" : "A transformation value that indicates whether the output vales are constrained to the min and max of the output range.",
    "title" : "transformType"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/RealFunctions\/erf(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The error function evaluated at x.  See also: erfc()",
    "summary" : "The error function evaluated at x.",
    "title" : "erf(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions\/cos(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The cosine of x.  Discussion For real types, x may be interpreted as an angle measured in radians. See also: sin() tan() acos()",
    "summary" : "The cosine of x.",
    "title" : "cos(_:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/invert(_:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts a value comparing it to the upper value of a range, mapping it to the input domain, and inverting scale’s transform.  Return Value a value within the bounds of the range values you provide, or nil if the value was dropped. The value to be scaled back from the range values to the domain. The higher bounding value of the range to transform from. Discussion This method is a convenience method that sets the lower value of the range is 0. The inverse of scale(_:to:). After converting the data back to the domain range, the scale may transform or drop the value based on the setting of transformType.",
    "summary" : "Converts a value comparing it to the upper value of a range, mapping it to the input domain, and inverting scale’s transform.",
    "title" : "invert(_:to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/ContinuousScale-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "ContinuousScale Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/domainContains(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a Boolean value that indicates whether the value you provided is within the scale’s domain.  Return Value true if the value is between the lower and upper domain values. The value to compare.",
    "summary" : "Returns a Boolean value that indicates whether the value you provided is within the scale’s domain.",
    "title" : "domainContains(_:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/transformAgainstDomain(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Processes a value against the scale, potentially constraining or dropping the value.  Return Value An updated value, or nil if the value was dropped. The value to transform against the domain of the scale. Discussion The value is transformed based on the scale’s transformType setting. transformType transform effect DomainDataTransform.none The method doesn’t adjusted or drop the value. DomainDataTransform.drop Values outside the scale’s domain are dropped. DomainDataTransform.clamp Values outside the scale’s domain are adjusted to match the highest or lowest values of the domain. ",
    "summary" : "Processes a value against the scale, potentially constraining or dropping the value.",
    "title" : "transformAgainstDomain(_:)"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions\/root(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The nth root of x.  See also: pow() sqrt()",
    "summary" : "The nth root of x.",
    "title" : "root(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/*(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Numeric.*(_:_:). ",
    "summary" : "Inherited from Numeric.*(_:_:).",
    "title" : "*(_:_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions\/tanh(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The hyperbolic tangent of x.  Discussion  See also: cosh() sinhh() atanh()",
    "summary" : "The hyperbolic tangent of x.",
    "title" : "tanh(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/transform(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the transform set to the value you provide.  Return Value A copy of the scale with the transform setting you provide. The transform constraint to apply when values fall outside the domain of the scale.",
    "summary" : "Returns a new scale with the transform set to the value you provide.",
    "title" : "transform(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "Preconditions:",
      "Edge Cases:",
      "Postconditions:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/Augmented\/sum(large:small:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The sum a + b represented as an implicit sum head + tail.  The summand with larger magnitude. The summand with smaller magnitude. Discussion head is the correctly rounded value of a + b. tail is the error from that computation rounded to the closest representable value. Unlike Augmented.product(a, b), the rounding error of a sum can never underflow. However, it may not be exactly representable when a and b differ widely in magnitude. This operation is sometimes called “fastTwoSum”. Preconditions: large.magnitude must not be smaller than small.magnitude. They may be equal, or one or both may be NaN. This precondition is only enforced in debug builds. Edge Cases: head is always the IEEE 754 sum a + b. If head is not finite, tail is unspecified and should not be interpreted as having any meaning (it may be NaN or infinity). Postconditions: If head is normal, then abs(tail) < head.ulp. Assuming IEEE 754 default rounding, abs(tail) <= head.ulp\/2.",
    "summary" : "The sum a + b represented as an implicit sum head + tail.",
    "title" : "sum(large:small:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/+(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from AdditiveArithmetic.+(_:_:). ",
    "summary" : "Inherited from AdditiveArithmetic.+(_:_:).",
    "title" : "+(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/Band"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A type used to indicate the start and stop positions for a band associated with the provided value. ",
    "summary" : "A type used to indicate the start and stop positions for a band associated with the provided value.",
    "title" : "Band"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/NiceValue\/rangeOfNiceValues(min:max:ofSize:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Generates a range of numbers with a minimum, maximum, and step interval that’s visually pleasing.  Return Value An array of nice numbers linearly spaced through the range, with the min and max equaling or exceeding the values you provide. The minimum value of a range of numbers. The maximum value of a range of numbers. The number of tick marks desired in the resulting range.",
    "summary" : "Generates a range of numbers with a minimum, maximum, and step interval that’s visually pleasing.",
    "title" : "rangeOfNiceValues(min:max:ofSize:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/AlgebraicField\/\/(_:_:)-9bcy2"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The (approximate) quotient a\/b. ",
    "summary" : "The (approximate) quotient a\/b.",
    "title" : "\/(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/TickScale-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "TickScale Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/domainLower"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The lower bound of the input domain. ",
    "summary" : "The lower bound of the input domain.",
    "title" : "domainLower"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/CustomDebugStringConvertible-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "CustomDebugStringConvertible Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/invert(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transforms a value within the range into the associated domain value.  Return Value A value linearly mapped from the range back into the domain. A value in the range of the scale. The lower bound to the range to map from. The upper bound to the range to map from.",
    "summary" : "Transforms a value within the range into the associated domain value.",
    "title" : "invert(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/NiceValue\/NumberType"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A type that can be converted into a nice number. ",
    "summary" : "A type that can be converted into a nice number.",
    "title" : "NumberType"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/transform(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the transform set to the value you provide.  Return Value A copy of the scale with the transform setting you provide. The transform constraint to apply when values fall outside the domain of the scale.",
    "summary" : "Returns a new scale with the transform set to the value you provide.",
    "title" : "transform(_:)"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/pow(_:_:)-5a1pd"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "x raised to the nth power.  See also: sqrt() root()",
    "summary" : "x raised to the nth power.",
    "title" : "pow(_:_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/scale(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transforms the input value using a linear function to the resulting value into the range you provide.  Return Value A value mapped to the range you provide. A value in the domain of the scale.",
    "summary" : "Transforms the input value using a linear function to the resulting value into the range you provide.",
    "title" : "scale(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/invert(_:from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transforms a value within the range into the associated domain value.  Return Value A value mapped from the range back into the domain using an inverse power transform. A value in the range of the scale. The lower bound to the range to map from. The upper bound to the range to map from.",
    "summary" : "Transforms a value within the range into the associated domain value.",
    "title" : "invert(_:from:to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/ExpressibleByIntegerLiteral-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "ExpressibleByIntegerLiteral Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/AlgebraicField\/\/=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Replaces a with the (approximate) quotient a\/b. ",
    "summary" : "Replaces a with the (approximate) quotient a\/b.",
    "title" : "\/=(_:_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScale\/domainContains(_:)-8vn1a"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a Boolean value that indicates whether the value you provided is within the scale’s domain.  Return Value true if the value is between the lower and upper domain values. The value to compare.",
    "summary" : "Returns a Boolean value that indicates whether the value you provided is within the scale’s domain.",
    "title" : "domainContains(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/ContinuousScale-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "ContinuousScale Implementations"
  },
  {
    "headings" : [
      "Discussion",
      "Edge cases:",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/magnitude"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The ∞-norm of the value (max(abs(real), abs(imaginary))).  Discussion If you need the Euclidean norm (a.k.a. 2-norm) use the length or lengthSquared properties instead. Edge cases: If z is not finite, z.magnitude is .infinity. If z is zero, z.magnitude is 0. Otherwise, z.magnitude is finite and non-zero. See also: .length .lengthSquared",
    "summary" : "The ∞-norm of the value (max(abs(real), abs(imaginary))).",
    "title" : "magnitude"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/atanh(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The inverse hyperbolic tangent of x.  Discussion  See also: acosh() asinh() tanh()",
    "summary" : "The inverse hyperbolic tangent of x.",
    "title" : "atanh(_:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/desiredTicks"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The number of ticks desired when creating the scale.  Discussion This number may not match the number of ticks returned by tickValues(_:from:to:)",
    "summary" : "The number of ticks desired when creating the scale.",
    "title" : "desiredTicks"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/Hashable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "Hashable Implementations"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/init(_:transform:desiredTicks:rangeLower:rangeHigher:)-7r97c"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new power scale for the domain of 0 to the value you provide.  The upper, or lower, bound for the domain. The transform constraint to apply when values fall outside the domain of the scale. The desired number of ticks when visually representing the scale. Discussion If the value you provide is less than 0, the domain of the scale ranges from the value you provide to 0. If the value you provide is greater than 0, the domain of the scale ranges from 0 to the value you provide.",
    "summary" : "Creates a new power scale for the domain of 0 to the value you provide.",
    "title" : "init(_:transform:desiredTicks:rangeLower:rangeHigher:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/AlgebraicField-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "AlgebraicField Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/range(lower:higher:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the range set to the values you provide.  Return Value A copy of the scale with the range values you provide. The lower bound for the scale’s range. The upper bound for the scale’s range.",
    "summary" : "Returns a new scale with the range set to the values you provide.",
    "title" : "range(lower:higher:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/AnyContinuousScale\/ContinuousScale-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "ContinuousScale Implementations"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/domainExtent"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The distance or length between the upper and lower bounds of the input domain. ",
    "summary" : "The distance or length between the upper and lower bounds of the input domain.",
    "title" : "domainExtent"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PointScale"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A discrete scale that maps from a discrete value within a collection to a point within a continuous output range.  Overview Point scales are useful for mapping discrete data from a collection to a collection of specific points. If you are rendering a bar chart, consider using the BandScale instead.",
    "summary" : "A discrete scale that maps from a discrete value within a collection to a point within a continuous output range.",
    "title" : "PointScale"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/Real\/exp10(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "10^x  See also: exp() expMinusOne() exp2() log10() pow()",
    "summary" : "10^x",
    "title" : "exp10(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScale\/range(lower:higher:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the range set to the values you provide.  Return Value A replica of the scale, with new range values. The lower bound for the scale’s range. The upper bound for the scale’s range.",
    "summary" : "Returns a new scale with the range set to the values you provide.",
    "title" : "range(lower:higher:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/domain(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the domain set to the values you provide.  Return Value A copy of the scale with the domain values you provide. The range to apply as the scale’s domain",
    "summary" : "Returns a new scale with the domain set to the values you provide.",
    "title" : "domain(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/domain(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the domain set to the values you provide.  Return Value A copy of the scale with the domain values you provide. The range to apply as the scale’s domain",
    "summary" : "Returns a new scale with the domain set to the values you provide.",
    "title" : "domain(_:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScale\/invert(_:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts a value comparing it to the upper value of a range, mapping it to the input domain, and inverting scale’s transform.  Return Value a value within the bounds of the range values you provide, or nil if the value was dropped. The value to be scaled back from the range values to the domain. The higher bounding value of the range to transform from. Discussion This method is a convenience method that sets the lower value of the range is 0. The inverse of scale(_:to:). After converting the data back to the domain range, the scale may transform or drop the value based on the setting of transformType.",
    "summary" : "Converts a value comparing it to the upper value of a range, mapping it to the input domain, and inverting scale’s transform.",
    "title" : "invert(_:to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PointScale\/padding(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the inner padding set to the value you provide.  The amount of padding between bands.",
    "summary" : "Returns a new scale with the inner padding set to the value you provide.",
    "title" : "padding(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/domain(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the domain set to the values you provide.  Return Value A copy of the scale with the domain values you provide. The range to apply as the scale’s domain",
    "summary" : "Returns a new scale with the domain set to the values you provide.",
    "title" : "domain(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/BandScale\/paddingOuter(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the outer padding set to the value you provide.  The amount of padding outside of the bands.",
    "summary" : "Returns a new scale with the outer padding set to the value you provide.",
    "title" : "paddingOuter(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/init(_:transform:desiredTicks:rangeLower:rangeHigher:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new logarithmic scale for the upper and lower bounds of the domain range you provide.  The range of the scale’s domain. The transform constraint to apply when values fall outside the domain of the scale. The desired number of ticks when visually representing the scale.",
    "summary" : "Creates a new logarithmic scale for the upper and lower bounds of the domain range you provide.",
    "title" : "init(_:transform:desiredTicks:rangeLower:rangeHigher:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/reciprocal-5ielo"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Implementations should be conservative with the reciprocal property; it is OK to return nil even in cases where a reciprocal could be represented. For this reason, a default implementation that simply always returns nil is correct, but conforming types should provide a better implementation if possible. ",
    "summary" : "Implementations should be conservative with the reciprocal property; it is OK to return nil even in cases where a reciprocal could be represented. For this reason, a default implementation that simply always returns nil is correct, but conforming types should provide a better implementation if possible.",
    "title" : "reciprocal"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "ComplexModule"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/log(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The natural logarithm of x.  See also: log(onePlus:) log2() (for types conforming to RealFunctions) log10() (for types conforming to RealFunctions)",
    "summary" : "The natural logarithm of x.",
    "title" : "log(_:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/NiceValue\/niceVersion(for:min:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a nice version of the number that’s visually appealing for chart axis values.  The number to convert into a nice value. A Boolean value that indicates to take the lower, rather than higher, nearest nice number as a result. Discussion The approximation rounds the number to the nearest 1, 2, 5, or 10 multiplied by the exponent of the initial value. These values can be used to expand a range to “round numbers” that are easier to understand than raw, specific values. The values are based on “Nice Numbers for Graph Labels”  in the book “Graphics Gems, Volume 1” by Andrew Glassner. Examples of this algorithm are also available on StackOverflow as nice label algorithm for charts with minimum ticks.",
    "summary" : "Returns a nice version of the number that’s visually appealing for chart axis values.",
    "title" : "niceVersion(for:min:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/ticks(rangeLower:rangeHigher:)-1jqvw"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns an array of the locations within the output range to locate ticks for the scale.  Return Value an Array of the values within the ClosedRange of range a ClosedRange representing the representing the range we are mapping the values into with the scale",
    "summary" : "Returns an array of the locations within the output range to locate ticks for the scale.",
    "title" : "ticks(rangeLower:rangeHigher:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/rangeHigher"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The upper bound of the input domain. ",
    "summary" : "The upper bound of the input domain.",
    "title" : "rangeHigher"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/+=(_:_:)-6pgx9"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from AdditiveArithmetic.+=(_:_:). ",
    "summary" : "Inherited from AdditiveArithmetic.+=(_:_:).",
    "title" : "+=(_:_:)"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions\/pow(_:_:)-9imp6"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "x raised to the nth power.  See also: sqrt() root()",
    "summary" : "x raised to the nth power.",
    "title" : "pow(_:_:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScale\/scale(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts a value comparing it to the input domain, transforming the value, and mapping it between the range values you provide.  Return Value A value within the bounds of the range values you provide, or nil if the value was dropped. The value to be scaled. Discussion Before scaling the value, the scale may transform or drop the value based on the setting of transformType.",
    "summary" : "Converts a value comparing it to the input domain, transforming the value, and mapping it between the range values you provide.",
    "title" : "scale(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/Decodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "Decodable Implementations"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions\/log(onePlus:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "log(1 + x), computed in such a way as to maintain accuracy for small x.  See also: log() log2() (for types conforming to RealFunctions) log10() (for types conforming to RealFunctions)",
    "summary" : "log(1 + x), computed in such a way as to maintain accuracy for small x.",
    "title" : "log(onePlus:)"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/lengthSquared"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The squared length (real*real + imaginary*imaginary).  Discussion This property is more efficient to compute than length, but is highly prone to overflow or underflow; for finite values that are not well-scaled, lengthSquared is often either zero or infinity, even when length is a finite number. Use this property only when you are certain that this value is well-scaled. For many cases, .magnitude can be used instead, which is similarly cheap to compute and always returns a representable value. See also: .length .magnitude",
    "summary" : "The squared length (real*real + imaginary*imaginary).",
    "title" : "lengthSquared"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions\/tan(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The tangent of x.  Discussion For real types, x may be interpreted as an angle measured in radians. See also: cos() sin() atan() atan2(y:x:) (for types conforming to RealFunctions) ",
    "summary" : "The tangent of x.",
    "title" : "tan(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/AlgebraicField\/\/(_:_:)-9nuhy"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The (approximate) quotient a\/b. ",
    "summary" : "The (approximate) quotient a\/b.",
    "title" : "\/(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/rangeLower"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The lower bound of the input domain. ",
    "summary" : "The lower bound of the input domain.",
    "title" : "rangeLower"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/Band\/higher"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available. ",
    "summary" : "No overview available.",
    "title" : "higher"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/*=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Numeric.*=(_:_:). ",
    "summary" : "Inherited from Numeric.*=(_:_:).",
    "title" : "*=(_:_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/BandScale\/invert(_:)-63wv8"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Maps the value from the range back to the discrete value that it matches.  Return Value The item that matches at that value, or nil if the point is within padding or outside the range of the scale. A value within the range of the scale.",
    "summary" : "Maps the value from the range back to the discrete value that it matches.",
    "title" : "invert(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/unsafeLengthSquared"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available. ",
    "summary" : "No overview available.",
    "title" : "unsafeLengthSquared"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/range(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the range set to the values you provide.  Return Value A copy of the scale with the range values you provide. The range to apply as the scale’s range.",
    "summary" : "Returns a new scale with the range set to the values you provide.",
    "title" : "range(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PointScale\/round"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A Boolean value that indicates the scaled values are returned as rounded values. ",
    "summary" : "A Boolean value that indicates the scaled values are returned as rounded values.",
    "title" : "round"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/BandScale\/rangeLower"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The lower value of the range into which the discrete values map. ",
    "summary" : "The lower value of the range into which the discrete values map.",
    "title" : "rangeLower"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/NiceValue"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A type that can be converted into an approximate value that is easier to understand.  Overview Types that can provide “nice” values derive from both the Numeric and Comparable protocol. This library provides extensions onto Double, Float, CGFloat, and Int that conform those types to NiceValue.",
    "summary" : "A type that can be converted into an approximate value that is easier to understand.",
    "title" : "NiceValue"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/invert(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transforms a value within the range into the associated domain value.  Return Value A value mapped from the range back into the domain using an inverse power transform. A value in the range of the scale. The lower bound to the range to map from. The upper bound to the range to map from.",
    "summary" : "Transforms a value within the range into the associated domain value.",
    "title" : "invert(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/description"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomStringConvertible.description. ",
    "summary" : "Inherited from CustomStringConvertible.description.",
    "title" : "description"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/invert(_:from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transforms a value within the range into the associated domain value.  Return Value A value linearly mapped from the range back into the domain. A value in the range of the scale. The lower bound to the range to map from. The upper bound to the range to map from.",
    "summary" : "Transforms a value within the range into the associated domain value.",
    "title" : "invert(_:from:to:)"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/tanh(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The hyperbolic tangent of x.  Discussion  See also: cosh() sinhh() atanh()",
    "summary" : "The hyperbolic tangent of x.",
    "title" : "tanh(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ConvertibleWithDouble\/fromDouble(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts the value from the current type into a Double.  Return Value A value of the current type converted from Double, rounded down if necessary. A value of the current type",
    "summary" : "Converts the value from the current type into a Double.",
    "title" : "fromDouble(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/BandScale\/paddingInner(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the inner padding set to the value you provide.  The amount of padding between bands.",
    "summary" : "Returns a new scale with the inner padding set to the value you provide.",
    "title" : "paddingInner(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/invert(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transforms the square root of the value within the range into the associated domain value.  Return Value A value linearly mapped from the range back into the domain. A value in the range of the scale. The lower bound to the range to map from. The upper bound to the range to map from.",
    "summary" : "Transforms the square root of the value within the range into the associated domain value.",
    "title" : "invert(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/AnyContinuousScale\/domainExtent"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The distance or length between the upper and lower bounds of the input domain. ",
    "summary" : "The distance or length between the upper and lower bounds of the input domain.",
    "title" : "domainExtent"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/init(_:exponent:transform:desiredTicks:rangeLower:rangeHigher:)-4o0iw"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new power scale for the upper and lower bounds of the domain range you provide.  The range of the scale’s domain. The exponent for the power transforming, defaulting to 1. The transform constraint to apply when values fall outside the domain of the scale. The desired number of ticks when visually representing the scale.",
    "summary" : "Creates a new power scale for the upper and lower bounds of the domain range you provide.",
    "title" : "init(_:exponent:transform:desiredTicks:rangeLower:rangeHigher:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/negate()"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from SignedNumeric.negate(). ",
    "summary" : "Inherited from SignedNumeric.negate().",
    "title" : "negate()"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScaleType\/!=(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.!=(_:_:). ",
    "summary" : "Inherited from Equatable.!=(_:_:).",
    "title" : "!=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/Tick\/rangeLocation"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The location where the tick should be placed within a chart’s range. ",
    "summary" : "The location where the tick should be placed within a chart’s range.",
    "title" : "rangeLocation"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/domainContains(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a Boolean value that indicates whether the value you provided is within the scale’s domain.  Return Value true if the value is between the lower and upper domain values. The value to compare.",
    "summary" : "Returns a Boolean value that indicates whether the value you provided is within the scale’s domain.",
    "title" : "domainContains(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions\/cosh(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The hyperbolic cosine of x.  Discussion  See also: sinh() tanh() acosh()",
    "summary" : "The hyperbolic cosine of x.",
    "title" : "cosh(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/Equatable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "Equatable Implementations"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/asin(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The arcsine  (inverse sine) of x.  Discussion For real types, the result may be interpreted as an angle measured in radians.  See also: acos() atan() sin()",
    "summary" : "The arcsine  (inverse sine) of x.",
    "title" : "asin(_:)"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/sqrt(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The square root of x.  See also: pow() root()",
    "summary" : "The square root of x.",
    "title" : "sqrt(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/AlgebraicField\/reciprocal-6sp2m"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Implementations should be conservative with the reciprocal property; it is OK to return nil even in cases where a reciprocal could be represented. For this reason, a default implementation that simply always returns nil is correct, but conforming types should provide a better implementation if possible. ",
    "summary" : "Implementations should be conservative with the reciprocal property; it is OK to return nil even in cases where a reciprocal could be represented. For this reason, a default implementation that simply always returns nil is correct, but conforming types should provide a better implementation if possible.",
    "title" : "reciprocal"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/Tick\/value"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The value of the tick. ",
    "summary" : "The value of the tick.",
    "title" : "value"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScale\/scale(_:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts a value comparing it to the input domain, transforming the value, and mapping it into values between 0 and to the upper bound you provide.  Return Value a value within the bounds of the range values you provide, or nil if the value was dropped. The value to be scaled. The higher bounding value of the range to transform from. Discussion This method is a convenience method that sets the lower value of the range is 0. Before scaling the value, the scale may transform or drop the value based on the setting of transformType.",
    "summary" : "Converts a value comparing it to the input domain, transforming the value, and mapping it into values between 0 and to the upper bound you provide.",
    "title" : "scale(_:to:)"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions\/expMinusOne(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "exp(x) - 1, computed in such a way as to maintain accuracy for small x.  Discussion When x is close to zero, the expression .exp(x) - 1 suffers from catastrophic cancellation and the result will not have full accuracy. The .expMinusOne(x) function gives you a means to address this problem. As an example, consider the expression (x + 1)*exp(x) - 1.  When x is smaller than .ulpOfOne, this expression evaluates to 0.0, when it should actually round to 2*x. We can get a full-accuracy result by using the following instead:  This re-written expression delivers an accurate result for all values of x, not just for small values. See also: exp() exp2() (for types conforming to RealFunctions) exp10() (for types conforming to RealFunctions)",
    "summary" : "exp(x) - 1, computed in such a way as to maintain accuracy for small x.",
    "title" : "expMinusOne(_:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/init(_:)-5aesj"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The complex number with specified real part and zero imaginary part.  Discussion Equivalent to Complex(real, 0).",
    "summary" : "The complex number with specified real part and zero imaginary part.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/-(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from AdditiveArithmetic.-(_:_:). ",
    "summary" : "Inherited from AdditiveArithmetic.-(_:_:).",
    "title" : "-(_:_:)"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/i"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The imaginary unit.  See also: .zero .one .infinity",
    "summary" : "The imaginary unit.",
    "title" : "i"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions\/acos(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The arccosine (inverse cosine) of x.  Discussion For real types, the result may be interpreted as an angle measured in radians.  See also: asin() atan() cos()",
    "summary" : "The arccosine (inverse cosine) of x.",
    "title" : "acos(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/domainHigher"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The upper bound of the input domain. ",
    "summary" : "The upper bound of the input domain.",
    "title" : "domainHigher"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/tickValues(_:from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts an array of values that matches the scale’s input type to a list of ticks that are within the scale’s domain.  Return Value A list of tick values validated against the domain, and range based on the setting of transformType an array of values of the Scale’s InputType The lower value of the range the scale maps to. The higher value of the range the scale maps to. Discussion Used for manually specifying a series of ticks that you want to have displayed. Values presented for display that are not within the domain of the scale are dropped. Values that scale outside of the range you provide are adjusted based on the setting of transformType.",
    "summary" : "Converts an array of values that matches the scale’s input type to a list of ticks that are within the scale’s domain.",
    "title" : "tickValues(_:from:to:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/scale(_:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts a value comparing it to the input domain, transforming the value, and mapping it into values between 0 and to the upper bound you provide.  Return Value a value within the bounds of the range values you provide, or nil if the value was dropped. The value to be scaled. The higher bounding value of the range to transform from. Discussion This method is a convenience method that sets the lower value of the range is 0. Before scaling the value, the scale may transform or drop the value based on the setting of transformType.",
    "summary" : "Converts a value comparing it to the input domain, transforming the value, and mapping it into values between 0 and to the upper bound you provide.",
    "title" : "scale(_:to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/rangeLower"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The lower bound of the input domain. ",
    "summary" : "The lower bound of the input domain.",
    "title" : "rangeLower"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/-=(_:_:)-85whw"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from AdditiveArithmetic.-=(_:_:). ",
    "summary" : "Inherited from AdditiveArithmetic.-=(_:_:).",
    "title" : "-=(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/BandScale\/range(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the range set to the range you provide.  The range of the values into which the discrete values map.",
    "summary" : "Returns a new scale with the range set to the range you provide.",
    "title" : "range(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/TickScale\/ticks(rangeLower:rangeHigher:)-15rnt"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns an array of the locations within the output range to locate ticks for the scale.  Return Value an Array of the values within the ClosedRange of range a ClosedRange representing the representing the range we are mapping the values into with the scale",
    "summary" : "Returns an array of the locations within the output range to locate ticks for the scale.",
    "title" : "ticks(rangeLower:rangeHigher:)"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/log(onePlus:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "log(1 + x), computed in such a way as to maintain accuracy for small x.  See also: log() log2() (for types conforming to RealFunctions) log10() (for types conforming to RealFunctions)",
    "summary" : "log(1 + x), computed in such a way as to maintain accuracy for small x.",
    "title" : "log(onePlus:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PointScale\/invert(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Maps the value from the range back to the discrete value that it matches.  Return Value The item that matches at that value, or nil if the point is within padding or outside the range of the scale. A value within the range of the scale.",
    "summary" : "Maps the value from the range back to the discrete value that it matches.",
    "title" : "invert(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/isNormal"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "True if this value is normal.  Discussion A complex number is normal if it is finite and either the real or imaginary component is normal. A floating-point number representing one of the components is normal if its exponent allows a full-precision representation. See also: .isFinite .isSubnormal .isZero",
    "summary" : "True if this value is normal.",
    "title" : "isNormal"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScaleType\/log"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available. ",
    "summary" : "No overview available.",
    "title" : "ContinuousScaleType.log"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/domainHigher"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The upper bound of the input domain. ",
    "summary" : "The upper bound of the input domain.",
    "title" : "domainHigher"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/rangeHigher"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The upper bound of the input domain. ",
    "summary" : "The upper bound of the input domain.",
    "title" : "rangeHigher"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PointScale\/rangeHigher"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The upper value of the range into which the discrete values map. ",
    "summary" : "The upper value of the range into which the discrete values map.",
    "title" : "rangeHigher"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/NiceValue\/niceMinStepMax(min:max:ofSize:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a tuple that provide nice conversions of the minimum, step value, maximum for a range with a desired number of steps.  Return Value An array of nice numbers linearly spaced through the range, with the min and max equaling or exceeding the values you provide. The minimum value of a range of numbers. The maximum value of a range of numbers. The number of tick marks desired in the resulting range.",
    "summary" : "Returns a tuple that provide nice conversions of the minimum, step value, maximum for a range with a desired number of steps.",
    "title" : "niceMinStepMax(min:max:ofSize:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/transformType"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A transformation value that indicates whether the output vales are constrained to the min and max of the output range.  Discussion If true, values processed by the scale are constrained to the output range, and values processed backwards through the scale are constrained to the input domain.",
    "summary" : "A transformation value that indicates whether the output vales are constrained to the min and max of the output range.",
    "title" : "transformType"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/domain(lower:higher:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the domain set to the values you provide.  Return Value A copy of the scale with the domain values you provide. The lower bound for the scale’s domain. The upper bound for the scale’s domain.",
    "summary" : "Returns a new scale with the domain set to the values you provide.",
    "title" : "domain(lower:higher:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/init(from:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Decodable.init(from:). ",
    "summary" : "Inherited from Decodable.init(from:).",
    "title" : "init(from:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A linear scale for transforming and mapping continuous input values within a domain to output values you provide. ",
    "summary" : "A linear scale for transforming and mapping continuous input values within a domain to output values you provide.",
    "title" : "LinearScale"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/BandScale"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A discrete scale that maps from a discrete value within a collection to a band within a continuous output range.  Overview Band scales are useful for bar charts, calculating explicit bands with optional spacing to align with elements of a collection. If you mapping discrete data into a scatter plot, consider using the PointScale instead.",
    "summary" : "A discrete scale that maps from a discrete value within a collection to a band within a continuous output range.",
    "title" : "BandScale"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/DomainDataTransform\/none"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Data processed against a scale isn’t influenced by the scale’s domain. ",
    "summary" : "Data processed against a scale isn’t influenced by the scale’s domain.",
    "title" : "DomainDataTransform.none"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/real"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The real part of this complex value.  Discussion If z is not finite, z.real is .nan.",
    "summary" : "The real part of this complex value.",
    "title" : "real"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/scaleType"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The type of continuous scale. ",
    "summary" : "The type of continuous scale.",
    "title" : "scaleType"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/tickValues(_:from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts an array of values that matches the scale’s input type to a list of ticks that are within the scale’s domain.  Return Value A list of tick values validated against the domain, and range based on the setting of transformType an array of values of the Scale’s InputType The lower value of the range the scale maps to. The higher value of the range the scale maps to. Discussion Used for manually specifying a series of ticks that you want to have displayed. Values presented for display that are not within the domain of the scale are dropped. Values that scale outside of the range you provide are adjusted based on the setting of transformType.",
    "summary" : "Converts an array of values that matches the scale’s input type to a list of ticks that are within the scale’s domain.",
    "title" : "tickValues(_:from:to:)"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/RealFunctions\/log2(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The base-2 logarithm of x.  See also: exp2() log() log(onePlus:) log10()",
    "summary" : "The base-2 logarithm of x.",
    "title" : "log2(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/domain(lower:higher:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the domain set to the values you provide.  Return Value A copy of the scale with the domain values you provide. The lower bound for the scale’s domain. The upper bound for the scale’s domain.",
    "summary" : "Returns a new scale with the domain set to the values you provide.",
    "title" : "domain(lower:higher:)"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/RealFunctions\/signGamma(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The sign of the gamma function, Γ(x).  Discussion For x >= 0, signGamma(x) is .plus. For negative x, signGamma(x) is .plus when x is an integer, and otherwise it is .minus whenever trunc(x) is even, and .plus when trunc(x) is odd. This function is used together with logGamma, which computes the logarithm of the absolute value of Γ(x), to recover the sign information. Not available on Windows targets. See also: gamma() logGamma()",
    "summary" : "The sign of the gamma function, Γ(x).",
    "title" : "signGamma(_:)"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A collection of components to provide structures that support data visualization. Overview SwiftViz includes components useful to creating visualizations of data. Many such visualizations require mapping from an abstract set of input values to another output value. Continuous scales map from one continuous range to another, such as 0...10 to 5.0...36.0. The continuous scales include scales that support linear, logarithmic, and exponential visualization transforms. Discrete scales map from a discrete range, defined by a collection, to a continuous range, as a point or as a band, with spacing considered in the scale’s range. Loosely based on the APIs and the visualization constructs created by Mike Bostock and contributors to D3.js",
    "summary" : "A collection of components to provide structures that support data visualization.",
    "title" : "SwiftVizScale"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/BandScale\/invert(_:)-9z1xu"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Maps a band back to the category it matches.  Return Value The category that matches the midpoint of the band values. a band providing a pair of range values.",
    "summary" : "Maps a band back to the category it matches.",
    "title" : "invert(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/scale(_:from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transforms the input value using a linear function to the square of the resulting value in the range you provide.  Return Value A value mapped to the range you provide. A value in the domain of the scale. The lower bound to the range to map to. The upper bound of the range to map to.",
    "summary" : "Transforms the input value using a linear function to the square of the resulting value in the range you provide.",
    "title" : "scale(_:from:to:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/range(lower:higher:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the range set to the values you provide.  Return Value A copy of the scale with the range values you provide. The lower bound for the scale’s range. The upper bound for the scale’s range.",
    "summary" : "Returns a new scale with the range set to the values you provide.",
    "title" : "range(lower:higher:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/Real\/reciprocal"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The (approximate) reciprocal (multiplicative inverse) of this number, if it is representable.  Discussion If x if finite and nonzero, and 1\/x overflows or underflows, then x.reciprocal is nil. Otherwise, a.reciprocal is 1\/x. If x.reciprocal is non-nil, you may be able to replace division by x with multiplication by this value. It is not advantageous to do this for an isolated division unless it is a compile-time constant visible to the compiler, but if you are dividing many values by a single denominator, this will often be a significant performance win. A typical use case looks something like this:  Error Bounds: Multiplying by the reciprocal instead of dividing will slightly perturb results. For example 5.0 \/ 3 is 1.6666666666666667, but 5.0 * 3.reciprocal! is 1.6666666666666665. The error of a normal division is bounded by half an ulp of the result; we can derive a quick error bound for multiplication by the real reciprocal (when it exists) as follows (I will use circle operators to denote real-number arithmetic, and normal operators for floating-point arithmetic):  where 0 < δᵢ <= ulpOfOne\/2. This gives a roughly 1-ulp error, about twice the error bound we get using division. For most purposes this is an acceptable error, but if you need to match results obtained using division, you should not use this.",
    "summary" : "The (approximate) reciprocal (multiplicative inverse) of this number, if it is representable.",
    "title" : "reciprocal"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/scale(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transforms the input value using a power function and maps the resulting value into the range you provide.  Return Value A value scaled by the power function, mapped to the range you provide. A value in the domain of the scale.",
    "summary" : "Transforms the input value using a power function and maps the resulting value into the range you provide.",
    "title" : "scale(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/ticks(rangeLower:rangeHigher:)-6o3sr"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns an array of the locations within the output range to locate ticks for the scale.  Return Value an Array of the values within the ClosedRange of range a ClosedRange representing the representing the range we are mapping the values into with the scale",
    "summary" : "Returns an array of the locations within the output range to locate ticks for the scale.",
    "title" : "ticks(rangeLower:rangeHigher:)"
  },
  {
    "headings" : [
      "Overview"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/Tick"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A  visual representation of a point along an axis.  Overview When created based on a range, a tick includes a location along a single direction and a textual representation. It is meant to be created using a Scale, with some input domain being mapped to visualization using the Scale’s output range.",
    "summary" : "A  visual representation of a point along an axis.",
    "title" : "Tick"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/domain(lower:higher:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the domain set to the values you provide.  Return Value A copy of the scale with the domain values you provide. The lower bound for the scale’s domain. The upper bound for the scale’s domain.",
    "summary" : "Returns a new scale with the domain set to the values you provide.",
    "title" : "domain(lower:higher:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/BandScale\/init(_:paddingInner:paddingOuter:round:from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new band scale.  An array of the types the scale maps into. The amount of padding between bands. The amount of padding outside of the bands. A Boolean value that indicates the scaled values are returned as rounded values. The lower value of the range into which the discrete values map. The upper value of the range into which the discrete values map.",
    "summary" : "Creates a new band scale.",
    "title" : "init(_:paddingInner:paddingOuter:round:from:to:)"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/expMinusOne(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "exp(x) - 1, computed in such a way as to maintain accuracy for small x.  Discussion When x is close to zero, the expression .exp(x) - 1 suffers from catastrophic cancellation and the result will not have full accuracy. The .expMinusOne(x) function gives you a means to address this problem. As an example, consider the expression (x + 1)*exp(x) - 1.  When x is smaller than .ulpOfOne, this expression evaluates to 0.0, when it should actually round to 2*x. We can get a full-accuracy result by using the following instead:  This re-written expression delivers an accurate result for all values of x, not just for small values. See also: exp() exp2() (for types conforming to RealFunctions) exp10() (for types conforming to RealFunctions)",
    "summary" : "exp(x) - 1, computed in such a way as to maintain accuracy for small x.",
    "title" : "expMinusOne(_:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/imaginary"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The imaginary part of this complex value.  Discussion If z is not finite, z.imaginary is .nan.",
    "summary" : "The imaginary part of this complex value.",
    "title" : "imaginary"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScale\/rangeHigher"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The upper bound of the input domain. ",
    "summary" : "The upper bound of the input domain.",
    "title" : "rangeHigher"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScale\/domain(lower:higher:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the domain set to the values you provide.  Return Value A replica of the scale, with new domain values. The lower bound for the scale’s domain. The upper bound for the scale’s domain.",
    "summary" : "Returns a new scale with the domain set to the values you provide.",
    "title" : "domain(lower:higher:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScaleType\/linear"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available. ",
    "summary" : "No overview available.",
    "title" : "ContinuousScaleType.linear"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions\/atanh(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The inverse hyperbolic tangent of x.  Discussion  See also: acosh() asinh() tanh()",
    "summary" : "The inverse hyperbolic tangent of x.",
    "title" : "atanh(_:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/AnyContinuousScale\/scale(_:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts a value comparing it to the input domain, transforming the value, and mapping it into values between 0 and to the upper bound you provide.  Return Value a value within the bounds of the range values you provide, or nil if the value was dropped. The value to be scaled. The higher bounding value of the range to transform from. Discussion This method is a convenience method that sets the lower value of the range is 0. Before scaling the value, the scale may transform or drop the value based on the setting of transformType.",
    "summary" : "Converts a value comparing it to the input domain, transforming the value, and mapping it into values between 0 and to the upper bound you provide.",
    "title" : "scale(_:to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/AnyContinuousScale\/domainLower"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The lower bound of the input domain. ",
    "summary" : "The lower bound of the input domain.",
    "title" : "domainLower"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/cosh(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The hyperbolic cosine of x.  Discussion  See also: sinh() tanh() acosh()",
    "summary" : "The hyperbolic cosine of x.",
    "title" : "cosh(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "Edge cases:",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/phase"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The phase (angle, or “argument”).  Discussion Returns the angle (measured above the real axis) in radians. If the complex value is zero or infinity, the phase is not defined, and nan is returned. Edge cases: If the complex value is zero or non-finite, phase is nan. See also: .length .polar init(r:θ:)",
    "summary" : "The phase (angle, or “argument”).",
    "title" : "phase"
  },
  {
    "headings" : [
      "Discussion",
      "Edge Cases:",
      "Postconditions:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/Augmented\/product(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The product a * b represented as an implicit sum head + tail.  Discussion head is the correctly rounded value of a*b. If no overflow or underflow occurs, tail represents the rounding error incurred in computing head, such that the exact product is the sum of head and tail computed without rounding. This operation is sometimes called “twoProd” or “twoProduct”. Edge Cases: head is always the IEEE 754 product a * b. If head is not finite, tail is unspecified and should not be interpreted as having any meaning (it may be NaN or infinity). When head is close to the underflow boundary, the rounding error may not be representable due to underflow, and tail will be rounded. If head is very small, tail may even be zero, even though the product is not exact. If head is zero, tail is also a zero with unspecified sign. Postconditions: If head is normal, then abs(tail) < head.ulp. Assuming IEEE 754 default rounding, abs(tail) <= head.ulp\/2. If both head and tail are normal, then a * b is exactly equal to head + tail when computed as real numbers.",
    "summary" : "The product a * b represented as an implicit sum head + tail.",
    "title" : "product(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/AnyContinuousScale\/scaleType(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available. ",
    "summary" : "No overview available.",
    "title" : "scaleType(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScale\/domainLower"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The lower bound of the input domain. ",
    "summary" : "The lower bound of the input domain.",
    "title" : "domainLower"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/init(_:)-4csd3"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The complex number with specified real part and zero imaginary part.  Discussion Equivalent to Complex(RealType(real), 0).",
    "summary" : "The complex number with specified real part and zero imaginary part.",
    "title" : "init(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/RealFunctions\/logGamma(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The logarithm of the absolute value of the gamma function, log(|Γ(x)|).  Discussion Not available on Windows targets. See also: gamma() signGamma()",
    "summary" : "The logarithm of the absolute value of the gamma function, log(|Γ(x)|).",
    "title" : "logGamma(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/sin(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The sine of x.  Discussion For real types, x may be interpreted as an angle measured in radians. See also: cos() tan() asin()",
    "summary" : "The sine of x.",
    "title" : "sin(_:)"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/RealFunctions\/exp2(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "2^x  See also: exp() expMinusOne() exp10() log2() pow()",
    "summary" : "2^x",
    "title" : "exp2(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/ElementaryFunctions-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "ElementaryFunctions Implementations"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/AlgebraicField\/reciprocal-156o3"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The (approximate) reciprocal (multiplicative inverse) of this number, if it is representable.  Discussion If self is zero and the type has no representation for infinity (as in a typical finite field implementation), or if a reciprocal would overflow or underflow such that it cannot be accurately represented, the result is nil. Note that .zero.reciprocal, somewhat surprisingly, is not nil for Real or Complex types, because these types have an .infinity value that acts as the reciprocal of .zero. If x.reciprocal is non-nil, you may be able to replace division by x with multiplication by this value. It is not advantageous to do this for an isolated division unless it is a compile-time constant visible to the compiler, but if you are dividing many values by a single denominator, this will often be a significant performance win. Note that this will slightly perturb results for some fields with approximate arithmetic, such as real types–using a normal division is generally more accurate–but no catastrophic loss of accuracy will result. For fields with exact arithmetic, or for the Complex types, the results are identical. A typical use case looks something like this: ",
    "summary" : "The (approximate) reciprocal (multiplicative inverse) of this number, if it is representable.",
    "title" : "reciprocal"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/exp(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The complex exponential function e^z whose base e is the base of the natural logarithm.  Discussion Mathematically, this operation can be expanded in terms of the Real operations exp, cos and sin as follows:  Note that naive evaluation of this expression in floating-point would be prone to premature overflow, since cos and sin both have magnitude less than 1 for most inputs (i.e. exp(x) may be infinity when exp(x) cos(y) would not be).",
    "summary" : "The complex exponential function e^z whose base e is the base of the natural logarithm.",
    "title" : "exp(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/Tick\/Identifiable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "Identifiable Implementations"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/desiredTicks"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The number of ticks desired when creating the scale.  Discussion This number may not match the number of ticks returned by tickValues(_:from:to:)",
    "summary" : "The number of ticks desired when creating the scale.",
    "title" : "desiredTicks"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/RealFunctions"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available. ",
    "summary" : "No overview available.",
    "title" : "RealFunctions"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/domain(lower:higher:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the domain set to the values you provide.  Return Value A copy of the scale with the domain values you provide. The lower bound for the scale’s domain. The upper bound for the scale’s domain.",
    "summary" : "Returns a new scale with the domain set to the values you provide.",
    "title" : "domain(lower:higher:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/AnyContinuousScale\/domain(lower:higher:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the domain set to the values you provide.  Return Value A replica of the scale, with new domain values. The lower bound for the scale’s domain. The upper bound for the scale’s domain.",
    "summary" : "Returns a new scale with the domain set to the values you provide.",
    "title" : "domain(lower:higher:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/-=(_:_:)-7i0xi"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from AdditiveArithmetic.-=(_:_:). ",
    "summary" : "Inherited from AdditiveArithmetic.-=(_:_:).",
    "title" : "-=(_:_:)"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions\/log(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The natural logarithm of x.  See also: log(onePlus:) log2() (for types conforming to RealFunctions) log10() (for types conforming to RealFunctions)",
    "summary" : "The natural logarithm of x.",
    "title" : "log(_:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/init(_:transform:desiredTicks:rangeLower:rangeHigher:)-288qo"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new power scale for the domain of 0 to the value you provide.  The upper, or lower, bound for the domain. The transform constraint to apply when values fall outside the domain of the scale. The desired number of ticks when visually representing the scale. Discussion If the value you provide is less than 0, the domain of the scale ranges from the value you provide to 0. If the value you provide is greater than 0, the domain of the scale ranges from 0 to the value you provide.",
    "summary" : "Creates a new power scale for the domain of 0 to the value you provide.",
    "title" : "init(_:transform:desiredTicks:rangeLower:rangeHigher:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/range(lower:higher:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the range set to the values you provide.  Return Value A copy of the scale with the range values you provide. The lower bound for the scale’s range. The upper bound for the scale’s range.",
    "summary" : "Returns a new scale with the range set to the values you provide.",
    "title" : "range(lower:higher:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScale\/domainExtent"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The distance or length between the upper and lower bounds of the input domain. ",
    "summary" : "The distance or length between the upper and lower bounds of the input domain.",
    "title" : "domainExtent"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/RealFunctions\/atan2(y:x:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "atan(y\/x), with sign selected according to the quadrant of (x, y).  See also: atan()",
    "summary" : "atan(y\/x), with sign selected according to the quadrant of (x, y).",
    "title" : "atan2(y:x:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/domainExtent"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The distance or length between the upper and lower bounds of the input domain. ",
    "summary" : "The distance or length between the upper and lower bounds of the input domain.",
    "title" : "domainExtent"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/AnyContinuousScale\/rangeHigher"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The upper bound of the input domain. ",
    "summary" : "The upper bound of the input domain.",
    "title" : "rangeHigher"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/transform(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the transform set to the value you provide.  Return Value A copy of the scale with the transform setting you provide. The transform constraint to apply when values fall outside the domain of the scale.",
    "summary" : "Returns a new scale with the transform set to the value you provide.",
    "title" : "transform(_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/transform(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the transform set to the value you provide.  Return Value A copy of the scale with the transform setting you provide. The transform constraint to apply when values fall outside the domain of the scale.",
    "summary" : "Returns a new scale with the transform set to the value you provide.",
    "title" : "transform(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "RealModule"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScale\/transformAgainstDomain(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Processes a value against the scale, potentially constraining or dropping the value.  Return Value An updated value, or nil if the value was dropped. The value to transform against the domain of the scale. Discussion The value is transformed based on the scale’s transformType setting. transformType transform effect DomainDataTransform.none The method doesn’t adjusted or drop the value. DomainDataTransform.drop Values outside the scale’s domain are dropped. DomainDataTransform.clamp Values outside the scale’s domain are adjusted to match the highest or lowest values of the domain. ",
    "summary" : "Processes a value against the scale, potentially constraining or dropping the value.",
    "title" : "transformAgainstDomain(_:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/AnyContinuousScale\/transformAgainstDomain(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Processes a value against the scale, potentially constraining or dropping the value.  Return Value An updated value, or nil if the value was dropped. The value to transform against the domain of the scale. Discussion The value is transformed based on the scale’s transformType setting. transformType transform effect DomainDataTransform.none The method doesn’t adjusted or drop the value. DomainDataTransform.drop Values outside the scale’s domain are dropped. DomainDataTransform.clamp Values outside the scale’s domain are adjusted to match the highest or lowest values of the domain. ",
    "summary" : "Processes a value against the scale, potentially constraining or dropping the value.",
    "title" : "transformAgainstDomain(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A logarithmic scale created with a continuous input domain that provides methods to convert values within that domain to an output range. ",
    "summary" : "A logarithmic scale created with a continuous input domain that provides methods to convert values within that domain to an output range.",
    "title" : "LogScale"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/isFinite"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "True if this value is finite.  Discussion A complex value is finite if neither component is an infinity or nan. See also: .isNormal .isSubnormal .isZero",
    "summary" : "True if this value is finite.",
    "title" : "isFinite"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/tickValues(_:from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts an array of values that matches the scale’s input type to a list of ticks that are within the scale’s domain.  Return Value A list of tick values validated against the domain, and range based on the setting of transformType an array of values of the Scale’s InputType The lower value of the range the scale maps to. The higher value of the range the scale maps to. Discussion Used for manually specifying a series of ticks that you want to have displayed. Values presented for display that are not within the domain of the scale are dropped. Values that scale outside of the range you provide are adjusted based on the setting of transformType.",
    "summary" : "Converts an array of values that matches the scale’s input type to a list of ticks that are within the scale’s domain.",
    "title" : "tickValues(_:from:to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/init(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A complex number constructed by specifying the real and imaginary parts. ",
    "summary" : "A complex number constructed by specifying the real and imaginary parts.",
    "title" : "init(_:_:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScale\/scale(_:from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts a value comparing it to the input domain, transforming the value, and mapping it between the range values you provide.  Return Value A value within the bounds of the range values you provide, or nil if the value was dropped. The value to be scaled. The lower bounding value of the range to transform to. The higher bounding value of the range to transform to. Discussion Before scaling the value, the scale may transform or drop the value based on the setting of transformType.",
    "summary" : "Converts a value comparing it to the input domain, transforming the value, and mapping it between the range values you provide.",
    "title" : "scale(_:from:to:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/transformAgainstDomain(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Processes a value against the scale, potentially constraining or dropping the value.  Return Value An updated value, or nil if the value was dropped. The value to transform against the domain of the scale. Discussion The value is transformed based on the scale’s transformType setting. transformType transform effect DomainDataTransform.none The method doesn’t adjusted or drop the value. DomainDataTransform.drop Values outside the scale’s domain are dropped. DomainDataTransform.clamp Values outside the scale’s domain are adjusted to match the highest or lowest values of the domain. ",
    "summary" : "Processes a value against the scale, potentially constraining or dropping the value.",
    "title" : "transformAgainstDomain(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/encode(to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Encodable.encode(to:). ",
    "summary" : "Inherited from Encodable.encode(to:).",
    "title" : "encode(to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/==(_:_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from Equatable.==(_:_:). ",
    "summary" : "Inherited from Equatable.==(_:_:).",
    "title" : "==(_:_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/invert(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transforms a value within the range into the associated domain value.  Return Value A value linearly mapped from the range back into the domain. A value in the range of the scale. The lower bound to the range to map from. The upper bound to the range to map from.",
    "summary" : "Transforms a value within the range into the associated domain value.",
    "title" : "invert(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScale\/rangeLower"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The lower bound of the input domain. ",
    "summary" : "The lower bound of the input domain.",
    "title" : "rangeLower"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/Tick\/label"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available. ",
    "summary" : "No overview available.",
    "title" : "label"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/Numerics"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "Numerics"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/AnyContinuousScale"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available. ",
    "summary" : "No overview available.",
    "title" : "AnyContinuousScale"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/atan(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The arctangent  (inverse tangent) of x.  Discussion For real types, the result may be interpreted as an angle measured in radians.  See also: acos() asin() atan2() (for types conforming to RealFunctions) tan()",
    "summary" : "The arctangent  (inverse tangent) of x.",
    "title" : "atan(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/Encodable-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "Encodable Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/TickScale\/ticks(rangeLower:rangeHigher:)-5hnpv"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns an array of the locations within the output range to locate ticks for the scale.  Return Value an Array of the values within the ClosedRange of range a ClosedRange representing the representing the range we are mapping the values into with the scale",
    "summary" : "Returns an array of the locations within the output range to locate ticks for the scale.",
    "title" : "ticks(rangeLower:rangeHigher:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/BandScale\/domain(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the domain set to the values you provide.  An array of the types the scale maps into.",
    "summary" : "Returns a new scale with the domain set to the values you provide.",
    "title" : "domain(_:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/NiceValue\/niceMinimumValueForRange(min:max:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a nice minimum value for a given range.  The minimum value of the range. The maximum value of the range. Discussion The algorithm returns 0 if the top of the range is sufficiently larger than the bottom, and the range doesn’t extend into negative values. For minimum values below 0, the number returned is converted into an appropriate “nice” number. The value returned will be lower than or equal to the minimum value of the range.",
    "summary" : "Returns a nice minimum value for a given range.",
    "title" : "niceMinimumValueForRange(min:max:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/desiredTicks"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The number of ticks desired when creating the scale.  Discussion This number may not match the number of ticks returned by tickValues(_:from:to:)",
    "summary" : "The number of ticks desired when creating the scale.",
    "title" : "desiredTicks"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions\/acosh(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The inverse hyperbolic cosine of x.  Discussion  See also: asinh() atanh() cosh()",
    "summary" : "The inverse hyperbolic cosine of x.",
    "title" : "acosh(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/exponent"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The exponent value of the scale. ",
    "summary" : "The exponent value of the scale.",
    "title" : "exponent"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/init(_:)-80jml"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "other rounded to the nearest representable value of this type. ",
    "summary" : "other rounded to the nearest representable value of this type.",
    "title" : "init(_:)"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/infinity"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The point at infinity.  See also: .zero .one .i",
    "summary" : "The point at infinity.",
    "title" : "infinity"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/zero-52bzy"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The additive identity, with real and imaginary parts both zero.  See also: .one .i .infinity",
    "summary" : "The additive identity, with real and imaginary parts both zero.",
    "title" : "zero"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/domain(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the domain set to the values you provide.  Return Value A copy of the scale with the domain values you provide. The range to apply as the scale’s domain",
    "summary" : "Returns a new scale with the domain set to the values you provide.",
    "title" : "domain(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/asinh(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The inverse hyperbolic sine of x.  Discussion  See also: acosh() atanh() sinh()",
    "summary" : "The inverse hyperbolic sine of x.",
    "title" : "asinh(_:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/RadialScale\/invert(_:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts a value comparing it to the upper value of a range, mapping it to the input domain, and inverting scale’s transform.  Return Value a value within the bounds of the range values you provide, or nil if the value was dropped. The value to be scaled back from the range values to the domain. The higher bounding value of the range to transform from. Discussion This method is a convenience method that sets the lower value of the range is 0. The inverse of scale(_:to:). After converting the data back to the domain range, the scale may transform or drop the value based on the setting of transformType.",
    "summary" : "Converts a value comparing it to the upper value of a range, mapping it to the input domain, and inverting scale’s transform.",
    "title" : "invert(_:to:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/tickValues(_:from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts an array of values that matches the scale’s input type to a list of ticks that are within the scale’s domain.  Return Value A list of tick values validated against the domain, and range based on the setting of transformType an array of values of the Scale’s InputType The lower value of the range the scale maps to. The higher value of the range the scale maps to. Discussion Used for manually specifying a series of ticks that you want to have displayed. Values presented for display that are not within the domain of the scale are dropped. Values that scale outside of the range you provide are adjusted based on the setting of transformType.",
    "summary" : "Converts an array of values that matches the scale’s input type to a list of ticks that are within the scale’s domain.",
    "title" : "tickValues(_:from:to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/Scale\/OutputType"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The type used for the scale’s range. ",
    "summary" : "The type used for the scale’s range.",
    "title" : "OutputType"
  },
  {
    "headings" : [
      "Discussion",
      "Mathematical Properties:",
      "See Also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:norm:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Test if self and other are approximately equal with specified tolerances and norm.  The value to which self is compared. The absolute tolerance to use in the comparison. This value should be non-negative and finite. This constraint on is only checked in debug builds, because a mathematically well-defined result exists for any tolerance, even one out of range. The relative tolerance to use in the comparison. Defaults to zero. This value should be non-negative and less than or equal to 1. This constraint on is only checked in debug builds, because a mathematically well-defined result exists for any tolerance, even one out of range. The norm to use for the comparison. Defaults to \\.magnitude. For example, if we wanted to test if a complex value was inside a circle of radius 0.001 centered at (1 + 0i), we could use:  (if we used the default norm, .magnitude, we would be testing if z were inside a square region instead.) Discussion true if self and other are equal, or if they are finite and either  or  where scale is max(norm(self), norm(other)). Mathematical Properties: isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:norm:) is reflexive for non-exceptional values (such as NaN). isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:norm:) is symmetric. isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:norm:) is not transitive. Because of this, approximately equality is not an equivalence relation, even when restricted to non-exceptional values. This means that you must not use approximate equality to implement a conformance to Equatable, as it will violate the invariants of code written against that protocol. For any point a, the set of values that compare approximately equal to a is convex (under the assumption that norm implements a valid norm, which cannot be checked by this function or a protocol). See Also: isApproximatelyEqual(to:[relativeTolerance:norm:]) isApproximatelyEqual(to:absoluteTolerance:[relativeTolerance:])",
    "summary" : "Test if self and other are approximately equal with specified tolerances and norm.",
    "title" : "isApproximatelyEqual(to:absoluteTolerance:relativeTolerance:norm:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/transformAgainstDomain(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Processes a value against the scale, potentially constraining or dropping the value.  Return Value An updated value, or nil if the value was dropped. The value to transform against the domain of the scale. Discussion The value is transformed based on the scale’s transformType setting. transformType transform effect DomainDataTransform.none The method doesn’t adjusted or drop the value. DomainDataTransform.drop Values outside the scale’s domain are dropped. DomainDataTransform.clamp Values outside the scale’s domain are adjusted to match the highest or lowest values of the domain. ",
    "summary" : "Processes a value against the scale, potentially constraining or dropping the value.",
    "title" : "transformAgainstDomain(_:)"
  },
  {
    "headings" : [
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/init(_:exponent:transform:desiredTicks:rangeLower:rangeHigher:)-41bn7"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new power scale for the domain of 0 to the value you provide.  The upper, or lower, bound for the domain. The exponent for the power transforming, defaulting to 1. The transform constraint to apply when values fall outside the domain of the scale. The desired number of ticks when visually representing the scale. Discussion If the value you provide is less than 0, the domain of the scale ranges from the value you provide to 0. If the value you provide is greater than 0, the domain of the scale ranges from 0 to the value you provide.",
    "summary" : "Creates a new power scale for the domain of 0 to the value you provide.",
    "title" : "init(_:exponent:transform:desiredTicks:rangeLower:rangeHigher:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/Scale\/invert(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts back from the output range to a value within the input domain.  Return Value A value within the bounds of the range values you provide, or nil if the value was dropped. The value to be scaled back from the range values to the domain. Discussion The inverse of scale(_:from:to:). After converting the data back to the domain range, the scale may transform or drop the value based on the setting of transformType.",
    "summary" : "Converts back from the output range to a value within the input domain.",
    "title" : "invert(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/scaleType"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The type of continuous scale. ",
    "summary" : "The type of continuous scale.",
    "title" : "scaleType"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions\/atan(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The arctangent  (inverse tangent) of x.  Discussion For real types, the result may be interpreted as an angle measured in radians.  See also: acos() asin() atan2() (for types conforming to RealFunctions) tan()",
    "summary" : "The arctangent  (inverse tangent) of x.",
    "title" : "atan(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/init(exactly:)-767k9"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "other, if it can be represented exactly in this type; otherwise nil. ",
    "summary" : "other, if it can be represented exactly in this type; otherwise nil.",
    "title" : "init(exactly:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/Scale\/scale(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts a value comparing it to the input domain, transforming the value, and mapping it between the range values you provide.  Return Value A value within the bounds of the range values you provide, or nil if the value was dropped. The value to be scaled. Discussion Before scaling the value, the scale may transform or drop the value based on the setting of transformType.",
    "summary" : "Converts a value comparing it to the input domain, transforming the value, and mapping it between the range values you provide.",
    "title" : "scale(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScale\/desiredTicks"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The number of requested tick marks for the scale. ",
    "summary" : "The number of requested tick marks for the scale.",
    "title" : "desiredTicks"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/Tick\/id-13dv3"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A unique identifier for the tick instance. ",
    "summary" : "A unique identifier for the tick instance.",
    "title" : "id"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/pow(_:_:)-1ylad"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "exp(y * log(x)) computed with additional internal precision.  See also: sqrt() root()",
    "summary" : "exp(y * log(x)) computed with additional internal precision.",
    "title" : "pow(_:_:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/range(lower:higher:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Returns a new scale with the range set to the values you provide.  Return Value A copy of the scale with the range values you provide. The lower bound for the scale’s range. The upper bound for the scale’s range.",
    "summary" : "Returns a new scale with the range set to the values you provide.",
    "title" : "range(lower:higher:)"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/isSubnormal"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "True if this value is subnormal.  Discussion A complex number is subnormal if it is finite, not normal, and not zero. When the result of a computation is subnormal, underflow has occurred and the result generally does not have full precision. See also: .isFinite .isNormal .isZero",
    "summary" : "True if this value is subnormal.",
    "title" : "isSubnormal"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/acos(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The arccosine (inverse cosine) of x.  Discussion For real types, the result may be interpreted as an angle measured in radians.  See also: asin() atan() cos()",
    "summary" : "The arccosine (inverse cosine) of x.",
    "title" : "acos(_:)"
  },
  {
    "headings" : [
      "Return Value",
      "Discussion"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/invert(_:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Converts a value comparing it to the upper value of a range, mapping it to the input domain, and inverting scale’s transform.  Return Value a value within the bounds of the range values you provide, or nil if the value was dropped. The value to be scaled back from the range values to the domain. The higher bounding value of the range to transform from. Discussion This method is a convenience method that sets the lower value of the range is 0. The inverse of scale(_:to:). After converting the data back to the domain range, the scale may transform or drop the value based on the setting of transformType.",
    "summary" : "Converts a value comparing it to the upper value of a range, mapping it to the input domain, and inverting scale’s transform.",
    "title" : "invert(_:to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/\/(_:_:)-78ojs"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The (approximate) quotient a\/b. ",
    "summary" : "The (approximate) quotient a\/b.",
    "title" : "\/(_:_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/init(from:to:transform:desiredTicks:rangeLower:rangeHigher:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Creates a new linear scale for the upper and lower bounds of the domain you provide.  The lower bound for the scale’s domain. The upper bound for the scale’s domain. The transform constraint to apply when values fall outside the domain of the scale. The desired number of ticks when visually representing the scale.",
    "summary" : "Creates a new linear scale for the upper and lower bounds of the domain you provide.",
    "title" : "init(from:to:transform:desiredTicks:rangeLower:rangeHigher:)"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LogScale\/scale(_:from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Transforms the input value using a linear function to the resulting value into the range you provide.  Return Value A value mapped to the range you provide. A value in the domain of the scale. The lower bound to the range to map to. The upper bound of the range to map to.",
    "summary" : "Transforms the input value using a linear function to the resulting value into the range you provide.",
    "title" : "scale(_:from:to:)"
  },
  {
    "headings" : [
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/RealFunctions\/log10(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The base-10 logarithm of x.  See also: exp10() log() log(onePlus:) log2()",
    "summary" : "The base-10 logarithm of x.",
    "title" : "log10(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PowerScale\/rangeLower"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The lower bound of the input domain. ",
    "summary" : "The lower bound of the input domain.",
    "title" : "rangeLower"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/ContinuousScaleType"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available. ",
    "summary" : "No overview available.",
    "title" : "ContinuousScaleType"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/AnyContinuousScale\/init(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available. ",
    "summary" : "No overview available.",
    "title" : "init(_:)"
  },
  {
    "headings" : [

    ],
    "kind" : "article",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/LinearScale\/ContinuousScale-Implementations"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "No overview available.",
    "summary" : "No overview available.",
    "title" : "ContinuousScale Implementations"
  },
  {
    "headings" : [
      "Return Value"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/PointScale\/invert(_:from:to:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Maps the value from the range back to the discrete value that it matches.  Return Value The item that matches at that value, or nil if the point is within padding or outside the range of the scale. A value within the range of the scale. The lower value of the range into which the discrete values map. The upper value of the range into which the discrete values map.",
    "summary" : "Maps the value from the range back to the discrete value that it matches.",
    "title" : "invert(_:from:to:)"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/Scale"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A type that maps values from an input domain to an output range. ",
    "summary" : "A type that maps values from an input domain to an output range.",
    "title" : "Scale"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/SwiftVizScale\/TickScale"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A type of scale that provides tick values from the domain it represents. ",
    "summary" : "A type of scale that provides tick values from the domain it represents.",
    "title" : "TickScale"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/acosh(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The inverse hyperbolic cosine of x.  Discussion  See also: asinh() atanh() cosh()",
    "summary" : "The inverse hyperbolic cosine of x.",
    "title" : "acosh(_:)"
  },
  {
    "headings" : [
      "Discussion",
      "See also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions\/asinh(_:)"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "The inverse hyperbolic sine of x.  Discussion  See also: acosh() atanh() sinh()",
    "summary" : "The inverse hyperbolic sine of x.",
    "title" : "asinh(_:)"
  },
  {
    "headings" : [
      "Overview",
      "Implementation notes:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A complex number represented by real and imaginary parts.  Overview TODO: introductory text on complex numbers Implementation notes: This type does not provide heterogeneous real\/complex arithmetic, not even the natural vector-space operations like real * complex. There are two reasons for this choice: first, Swift broadly avoids mixed-type arithmetic when the operation can be adequately expressed by a conversion and homogeneous arithmetic. Second, with the current typechecker rules, it would lead to undesirable ambiguity in common expressions (see README.md for more details). Unlike C’s _Complex and C++’s std::complex<> types, we do not attempt to make meaningful semantic distinctions between different representations of infinity or NaN. Any Complex value with at least one non-finite component is simply “non-finite”. In as much as possible, we use the semantics of the point at infinity on the Riemann sphere for such values. This approach simplifies the number of edge cases that need to be considered for multiplication, division, and the elementary functions considerably. .magnitude does not return the Euclidean norm; it uses the “infinity norm” (max(|real|,|imaginary|)) instead. There are two reasons for this choice: first, it’s simply faster to compute on most hardware. Second, there exist values for which the Euclidean norm cannot be represented (consider a number with .real and .imaginary both equal to RealType.greatestFiniteMagnitude; the Euclidean norm would be .sqrt(2) * .greatestFiniteMagnitude, which overflows). Using the infinity norm avoids this problem entirely without significant downsides. You can access the Euclidean norm using the length property.",
    "summary" : "A complex number represented by real and imaginary parts.",
    "title" : "Complex"
  },
  {
    "headings" : [
      "Overview",
      "See Also:"
    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/RealModule\/ElementaryFunctions"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "A type that has elementary functions available.  Overview An “elementary function” is a function built up from powers, roots, exponentials, logarithms, trigonometric functions (sin, cos, tan) and their inverses, and the hyperbolic functions (sinh, cosh, tanh) and their inverses. Conformance to this protocol means that all of these building blocks are available as static functions on the type.  There are three broad families of functions defined by ElementaryFunctions: Exponential, trigonometric, and hyperbolic functions: exp, expMinusOne, cos, sin, tan, cosh, sinh, and tanh. Logarithmic, inverse trigonometric, and inverse hyperbolic functions: log, log(onePlus:), acos, asin, atan, acosh, asinh, and atanh. Power and root functions: pow, sqrt, and root. ElementaryFunctions conformance implies AdditiveArithmetic, so addition and subtraction and the .zero property are also available. There are two other protocols that you are more likely to want to use directly: RealFunctions refines ElementaryFunctions and includes additional functions specific to real number types. Real conforms to RealFunctions and FloatingPoint, and is the protocol that you will want to use most often for generic code. See Also: RealFunctions Real",
    "summary" : "A type that has elementary functions available.",
    "title" : "ElementaryFunctions"
  },
  {
    "headings" : [

    ],
    "kind" : "symbol",
    "location" : {
      "reference" : {
        "interfaceLanguage" : "swift",
        "url" : "doc:\/\/com.github.swiftviz.SwiftVizScale\/documentation\/ComplexModule\/Complex\/debugDescription"
      },
      "type" : "topLevelPage"
    },
    "rawIndexableTextContent" : "Inherited from CustomDebugStringConvertible.debugDescription. ",
    "summary" : "Inherited from CustomDebugStringConvertible.debugDescription.",
    "title" : "debugDescription"
  }
]